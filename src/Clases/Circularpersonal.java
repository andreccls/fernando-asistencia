package Clases;
// Generated 11-may-2013 2:42:05 by Hibernate Tools 3.2.1.GA



/**
 * Circularpersonal generated by hbm2java
 */
public class Circularpersonal  implements java.io.Serializable {


     private CircularpersonalId id;
     private Personal personal;
     private Circular circular;
     private String descripcion;
     private Boolean estado;

    public Circularpersonal() {
    }

	
    public Circularpersonal(CircularpersonalId id, Personal personal, Circular circular) {
        this.id = id;
        this.personal = personal;
        this.circular = circular;
    }
    public Circularpersonal(CircularpersonalId id, Personal personal, Circular circular, String descripcion, Boolean estado) {
       this.id = id;
       this.personal = personal;
       this.circular = circular;
       this.descripcion = descripcion;
       this.estado = estado;
    }
    
    @Override
    public String toString() {
        return circular.getFirma();
    }
   
    public CircularpersonalId getId() {
        return this.id;
    }
    
    public void setId(CircularpersonalId id) {
        this.id = id;
    }
    public Personal getPersonal() {
        return this.personal;
    }
    
    public void setPersonal(Personal personal) {
        this.personal = personal;
    }
    public Circular getCircular() {
        return this.circular;
    }
    
    public void setCircular(Circular circular) {
        this.circular = circular;
    }
    public String getDescripcion() {
        return this.descripcion;
    }
    
    public void setDescripcion(String descripcion) {
        this.descripcion = descripcion;
    }
    public Boolean getEstado() {
        return this.estado;
    }
    
    public void setEstado(Boolean estado) {
        this.estado = estado;
    }

//// GENERADO POR GONZALEZ FERNANDO
    
    
    public void guardarCircularpersonal(Circularpersonal unCircularpersonal){
        Controlador.getPERSISTENCIA().insert(this);

//        JOptionPane.showMessageDialog(null,"El Departamento se guardó correctamente","Registrar departamento",JOptionPane.INFORMATION_MESSAGE);
    }
    
    public void eliminarCircularpersonal(Circularpersonal unCircularpersonal){
//        Iterator it=personalDepartamentos.iterator();
//        if(it.hasNext()){
//            JOptionPane.showMessageDialog(null,"El Departamento no se puede eliminar porque esta relacionada con otros personales","Eliminar departamento",JOptionPane.ERROR_MESSAGE);
//        }else{
        Controlador.getPERSISTENCIA().delete(this);
//        JOptionPane.showMessageDialog(null,"El Departamento se eliminó correctamente","Eliminar departamento",JOptionPane.INFORMATION_MESSAGE);
//        }
    }
    
    public void ActualizarCircularpersonal(Circularpersonal unCircularpersonal){
        Controlador.getPERSISTENCIA().update(this);

//        JOptionPane.showMessageDialog(null,"El Departamento se guardó correctamente","Registrar departamento",JOptionPane.INFORMATION_MESSAGE);
    }


}


