package Clases;
// Generated 13/11/2012 06:11:39 by Hibernate Tools 3.2.1.GA


import java.util.Date;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Set;
import javax.swing.JOptionPane;

/**
 * Nivel generated by hbm2java
 */
public class Nivel  implements java.io.Serializable {


     private Integer idNivel;
     private Tiponivel tiponivel;
     private Cargo cargo;
     private Integer horas;
     private Set<Activo> activos = new HashSet<Activo>(0);
     private Set<Inactivo> inactivos = new HashSet<Inactivo>(0);

    public Nivel() {
    }

	
    public Nivel(Tiponivel tiponivel, Cargo cargo) {
        this.tiponivel = tiponivel;
        this.cargo = cargo;
    }
    public Nivel(Tiponivel tiponivel, Cargo cargo, Integer horas, Set<Activo> activos, Set<Inactivo> inactivos) {
       this.tiponivel = tiponivel;
       this.cargo = cargo;
       this.horas = horas;
       this.activos = activos;
       this.inactivos = inactivos;
    }
    
    @Override
    public String toString() {
        return tiponivel.getNombre();
    }
   
    public Integer getIdNivel() {
        return this.idNivel;
    }
    
    public void setIdNivel(Integer idNivel) {
        this.idNivel = idNivel;
    }
    public Tiponivel getTiponivel() {
        return this.tiponivel;
    }
    
    public void setTiponivel(Tiponivel tiponivel) {
        this.tiponivel = tiponivel;
    }
    public Cargo getCargo() {
        return this.cargo;
    }
    
    public void setCargo(Cargo cargo) {
        this.cargo = cargo;
    }
    public Integer getHoras() {
        return this.horas;
    }
    
    public void setHoras(Integer horas) {
        this.horas = horas;
    }
    public Set<Activo> getActivos() {
        return this.activos;
    }
    
    public void setActivos(Set<Activo> activos) {
        this.activos = activos;
    }
    public Set<Inactivo> getInactivos() {
        return this.inactivos;
    }
    
    public void setInactivos(Set<Inactivo> inactivos) {
        this.inactivos = inactivos;
    }

/// GENERADO POR GONZALEZ FERNANDO
    
    
    public void guardarNivel(Nivel unNivel){
        Controlador.getPERSISTENCIA().insert(this);

        JOptionPane.showMessageDialog(null,"El Nivel "+ 
                String.valueOf(unNivel.getIdNivel()) +
                " se guardo correctamente","Mensaje",JOptionPane.INFORMATION_MESSAGE);
    }
    
    public void ActualizarNivel(Nivel unNivel){
        Controlador.getPERSISTENCIA().update(this);

        JOptionPane.showMessageDialog(null,"El Nivel "+ 
                String.valueOf(unNivel.getIdNivel()) +
                " se actualiz√≥ correctamente","Mensaje",JOptionPane.INFORMATION_MESSAGE);
    }
    
    public void eliminarNivel(Nivel unNivel){
        Controlador.getPERSISTENCIA().delete(this);

        JOptionPane.showMessageDialog(null,"El nivel "+ 
                String.valueOf(unNivel.getIdNivel()) +
                " se elimino correctamente","Mensaje",JOptionPane.INFORMATION_MESSAGE);
    }
    

    public Activo crearActivo(Nivel nivel, String dia, Set<ActivoIniciofin> activoIniciofins){
        Activo unActivo=new Activo (nivel, dia, activoIniciofins);
        unActivo.guardarActivo(unActivo);
        return unActivo;
     }
    
    public void crearInactivo(Nivel nivel, String motivo, Date fechaInicio, Date fechaFin, String instrumentoLegal){
        Inactivo unInactivo=new Inactivo (nivel, motivo, fechaInicio, fechaFin, instrumentoLegal);
        //if(!existePersonal(unPersonal)){
            unInactivo.guardarInactivo(unInactivo);
            //agregarReserva(unaReserva);
        //} 
     }

    public Boolean existeActivo(Activo act,Nivel niv){
        Boolean aux=false;
        Iterator<Activo> it=niv.getActivos().iterator();
        while(it.hasNext()){
            Activo ac=(Activo) it.next();
            if(ac.getDia().equals(act.getDia())){
              if(niv.getIdNivel()==ac.getNivel().getIdNivel()){
                aux=true;
                break;
              }
            }
        }
    return aux;
    }
    
    public Activo getActivo(Activo act,Nivel niv){
        Activo aux=null;
        Iterator<Activo> it=niv.getActivos().iterator();
        while(it.hasNext()){
            Activo ac=(Activo) it.next();
            if(ac.getDia().equals(act.getDia())){
              if(niv.getIdNivel()==ac.getNivel().getIdNivel()){
                aux=ac;
                break;
              }
            }
        }
    return aux;
    }
    

}


