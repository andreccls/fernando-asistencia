/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package Presentacion;

import Clases.Asistencia;
import Clases.Controlador;
import Clases.Personal;
import Clases.Registroacceso;
import TareasProgramadas.ControladorTarea;
import java.awt.Component;
import java.awt.Frame;
import java.awt.Image;
import java.awt.event.KeyEvent;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.Iterator;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultCellEditor;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JComboBox;
import javax.swing.JFormattedTextField;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumn;
import javax.swing.text.DefaultFormatterFactory;
import javax.swing.text.MaskFormatter;

/**
 *
 * @author fer
 */
public class JFrameRegistro extends javax.swing.JFrame {

    /**
     * Creates new form JFrameRegistro
     */
    
    public Controlador Drive;
    public Personal adm;
    ControladorTarea co=new ControladorTarea();
//    int idsesion;
    Personal per = new Personal();
    StringBuffer buffer = new StringBuffer();
//    HiloProgreso hilo;
    
    public JFrameRegistro(Controlador unDrive,Personal admin) {
        this.adm=admin;
        this.Drive = unDrive;
//        this.idsesion=id;
        initComponents();
        Date dia= dateChooserCombo1.getSelectedDate().getTime();
        String buscar = (String) jComboBox2.getSelectedItem();
        String buscar1 = (String) jComboBox1.getSelectedItem();
        Drive.Cargarpersonal(jTable2, buscar1, buffer.toString().toUpperCase());
        Drive.CargarTablaRegistro(jTable1, per, dia, buscar);
        String hora=Drive.Obtenerhoras(jTable1);
        jLabel4.setText(hora);
        if(buscar.equals("DIA")){
        jLabel6.setText(String.valueOf(dia.getDate()));
        }else if(buscar.equals("SEMANA")){
            jLabel6.setText(String.valueOf(dia.getDate()));
        }else if(buscar.equals("MES")){
            jLabel6.setText(String.valueOf(dia.getMonth()+1));
        }else if(buscar.equals("AÃ‘O")){
            jLabel6.setText(String.valueOf(dia.getYear()));
        }
        ImageIcon fott1 = new ImageIcon(getClass().getResource("/imagenes/no.png"));
        Icon icono1 = new ImageIcon(fott1.getImage().getScaledInstance(25, 25, Image.SCALE_DEFAULT));
        jButton3.setIcon(icono1);
        ImageIcon fott2 = new ImageIcon(getClass().getResource("/imagenes/Imprimir2.png"));
        Icon icono2 = new ImageIcon(fott2.getImage().getScaledInstance(25, 25, Image.SCALE_DEFAULT));
        jButton5.setIcon(icono2);
        ImageIcon fott3 = new ImageIcon(getClass().getResource("/imagenes/Buscar.png"));
        Icon icono3 = new ImageIcon(fott3.getImage().getScaledInstance(25, 25, Image.SCALE_DEFAULT));
        jButton1.setIcon(icono3);
        ImageIcon fott4 = new ImageIcon(getClass().getResource("/imagenes/ok.png"));
        Icon icono4 = new ImageIcon(fott4.getImage().getScaledInstance(25, 25, Image.SCALE_DEFAULT));
        jButton2.setIcon(icono4);
        
        TableColumn Column3 = jTable1.getColumnModel().getColumn(2);
        try {
            MaskFormatter campo=null;
            campo = new MaskFormatter("HH:mm");
            JFormattedTextField text = new JFormattedTextField(campo);
            MaskFormatter uppercase=null;
            uppercase = new MaskFormatter("##:##");
            DefaultFormatterFactory factory = new DefaultFormatterFactory(uppercase);
            text.setFormatterFactory(factory);
            Column3.setCellEditor(new DefaultCellEditor(text));
        } catch (ParseException ex) {
            Logger.getLogger(JFrameActualizarPersonal.class.getName()).log(Level.SEVERE, null, ex);
        }
        int[] anchos4 = {80, 60, 60};
        for (int i = 0; i < jTable1.getColumnCount(); i++) {
            jTable1.getColumnModel().getColumn(i).setPreferredWidth(anchos4[i]);
        }
        int[] anchos3 = {120, 80, 70, 70};
        for (int i = 0; i < jTable2.getColumnCount(); i++) {
            jTable2.getColumnModel().getColumn(i).setPreferredWidth(anchos3[i]);
        }
        jTable1.getTableHeader().setDefaultRenderer(new JFrameRegistro.HeaderRenderer(jTable1));
        jTable2.getTableHeader().setDefaultRenderer(new JFrameRegistro.HeaderRenderer(jTable2));
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jComboBox1 = new javax.swing.JComboBox();
        jTextField1 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jButton3 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        dateChooserCombo1 = new datechooser.beans.DateChooserCombo();
        jLabel1 = new javax.swing.JLabel();
        jComboBox2 = new javax.swing.JComboBox();
        jLabel6 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("SISTEMA DE ASISTENCIA DE PERSONAL EDUCATIVO");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED), "Seleccione un Personal"));

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Apellido", "Nombre", "Sexo", "Estado civil" }));

        jTextField1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextField1KeyTyped(evt);
            }
        });

        jButton1.setText("Buscar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTable2.setAutoCreateRowSorter(true);
        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Apellido", "DNI", "Sexo", "Estado civil"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable2MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jTable2MouseEntered(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jTable2MouseReleased(evt);
            }
        });
        jScrollPane3.setViewportView(jTable2);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(12, 12, 12)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton1)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 93, Short.MAX_VALUE)
                .addContainerGap())
        );

        jButton3.setText("Salir");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton5.setText("Imprimir");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));

        jTable1.setAutoCreateRowSorter(true);
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Fecha", "Ingreso", "Salida"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setRowHeight(25);
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jTable1MouseEntered(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jTable1MouseReleased(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jLabel2.setText("Seleccione un dia:");

        dateChooserCombo1.setCurrentView(new datechooser.view.appearance.AppearancesList("Grey",
            new datechooser.view.appearance.ViewAppearance("custom",
                new datechooser.view.appearance.swing.SwingCellAppearance(new java.awt.Font("Tahoma", java.awt.Font.PLAIN, 11),
                    new java.awt.Color(0, 0, 0),
                    new java.awt.Color(0, 0, 255),
                    false,
                    true,
                    new datechooser.view.appearance.swing.ButtonPainter()),
                new datechooser.view.appearance.swing.SwingCellAppearance(new java.awt.Font("Tahoma", java.awt.Font.PLAIN, 11),
                    new java.awt.Color(0, 0, 0),
                    new java.awt.Color(0, 0, 255),
                    true,
                    true,
                    new datechooser.view.appearance.swing.ButtonPainter()),
                new datechooser.view.appearance.swing.SwingCellAppearance(new java.awt.Font("Tahoma", java.awt.Font.PLAIN, 11),
                    new java.awt.Color(0, 0, 255),
                    new java.awt.Color(0, 0, 255),
                    false,
                    true,
                    new datechooser.view.appearance.swing.ButtonPainter()),
                new datechooser.view.appearance.swing.SwingCellAppearance(new java.awt.Font("Tahoma", java.awt.Font.PLAIN, 11),
                    new java.awt.Color(128, 128, 128),
                    new java.awt.Color(0, 0, 255),
                    false,
                    true,
                    new datechooser.view.appearance.swing.LabelPainter()),
                new datechooser.view.appearance.swing.SwingCellAppearance(new java.awt.Font("Tahoma", java.awt.Font.PLAIN, 11),
                    new java.awt.Color(0, 0, 0),
                    new java.awt.Color(0, 0, 255),
                    false,
                    true,
                    new datechooser.view.appearance.swing.LabelPainter()),
                new datechooser.view.appearance.swing.SwingCellAppearance(new java.awt.Font("Tahoma", java.awt.Font.PLAIN, 11),
                    new java.awt.Color(0, 0, 0),
                    new java.awt.Color(255, 0, 0),
                    false,
                    false,
                    new datechooser.view.appearance.swing.ButtonPainter()),
                (datechooser.view.BackRenderer)null,
                false,
                true)));
    dateChooserCombo1.setBehavior(datechooser.model.multiple.MultyModelBehavior.SELECT_SINGLE);
    dateChooserCombo1.addSelectionChangedListener(new datechooser.events.SelectionChangedListener() {
        public void onSelectionChange(datechooser.events.SelectionChangedEvent evt) {
            dateChooserCombo1OnSelectionChange(evt);
        }
    });

    jLabel1.setText("Buscar por:");

    jComboBox2.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "DIA", "SEMANA", "MES", "AÃ‘O" }));
    jComboBox2.addItemListener(new java.awt.event.ItemListener() {
        public void itemStateChanged(java.awt.event.ItemEvent evt) {
            jComboBox2ItemStateChanged(evt);
        }
    });

    jLabel6.setText("DIA");

    javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
    jPanel3.setLayout(jPanel3Layout);
    jPanel3Layout.setHorizontalGroup(
        jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(jPanel3Layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jScrollPane1)
                .addGroup(jPanel3Layout.createSequentialGroup()
                    .addComponent(jLabel2)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addComponent(dateChooserCombo1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addComponent(jLabel1)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(jLabel6)
                    .addGap(0, 0, Short.MAX_VALUE)))
            .addContainerGap())
    );
    jPanel3Layout.setVerticalGroup(
        jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                .addComponent(jLabel2)
                .addComponent(dateChooserCombo1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jLabel1)
                .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jLabel6))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addContainerGap())
    );

    jLabel3.setText("Horas trabajadas:");

    jLabel4.setText("Horas");

    jLabel5.setText("Minutos");

    jButton2.setText("Aceptar");
    jButton2.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            jButton2ActionPerformed(evt);
        }
    });

    javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
    jPanel1.setLayout(jPanel1Layout);
    jPanel1Layout.setHorizontalGroup(
        jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(jPanel1Layout.createSequentialGroup()
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addComponent(jLabel3)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(jLabel4)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(jLabel5)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton2)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addComponent(jButton5)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addComponent(jButton3))
                .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
    );

    jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jButton3, jButton5});

    jPanel1Layout.setVerticalGroup(
        jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(jPanel1Layout.createSequentialGroup()
            .addContainerGap()
            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE, false)
                    .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton5)
                    .addComponent(jButton2))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5))))
    );

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(layout.createSequentialGroup()
            .addContainerGap()
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addContainerGap(38, Short.MAX_VALUE))
    );
    layout.setVerticalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(layout.createSequentialGroup()
            .addContainerGap()
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addContainerGap(23, Short.MAX_VALUE))
    );

    pack();
    }// </editor-fold>//GEN-END:initComponents

    private static class HeaderRenderer implements TableCellRenderer {

        DefaultTableCellRenderer renderer;

        public HeaderRenderer(JTable table) {
            renderer = (DefaultTableCellRenderer) table.getTableHeader().getDefaultRenderer();
            renderer.setHorizontalAlignment(JLabel.CENTER);
        }

        @Override
        public Component getTableCellRendererComponent(
                JTable table, Object value, boolean isSelected,
                boolean hasFocus, int row, int col) {
            return renderer.getTableCellRendererComponent(
                    table, value, isSelected, hasFocus, row, col);
        }
    }
    
    private void jTextField1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField1KeyTyped
        Drive.LimpiarTabla(jTable2);
        char car=evt.getKeyChar();
//        int m= buffer.capacity();
        if((car>='a' && car<='z') || (car>='A' && car<='Z')){
            buffer.append(evt.getKeyChar());
            String es=buffer.toString();
            String buscar=(String) jComboBox1.getSelectedItem();
            Drive.Cargarpersonal(jTable2,buscar, es.toUpperCase());
        }else if(car==(char)KeyEvent.VK_BACK_SPACE){
            int m= buffer.length();
            if(m!=0){
                buffer.deleteCharAt(buffer.length()-1);
            }
            String es=buffer.toString();
            String buscar=(String) jComboBox1.getSelectedItem();
            Drive.Cargarpersonal(jTable2,buscar, es.toUpperCase());
        }
    }//GEN-LAST:event_jTextField1KeyTyped

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        Drive.LimpiarTabla(jTable1);
        String buscar=(String) jComboBox1.getSelectedItem();
        Drive.Cargarpersonal(jTable2, buscar, jTextField1.getText().toUpperCase());
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked

    }//GEN-LAST:event_jTable1MouseClicked

    private void jTable1MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_jTable1MouseEntered

    private void jTable1MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseReleased

    }//GEN-LAST:event_jTable1MouseReleased

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        int confirmado = JOptionPane.showConfirmDialog(null, "Â¿Desea volver al menÃº principal?", "Consultar Registro", JOptionPane.YES_NO_OPTION);
        if (JOptionPane.OK_OPTION == confirmado) {
            Frame vp = new JFramePrincipal(Drive,adm);
            this.dispose();
            vp.show();
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        try {
            jButton5.setEnabled(false);
            jButton2.setEnabled(false);
            jButton3.setEnabled(false);
            String filtro1 = (String) jComboBox2.getSelectedItem();
            Date fin= dateChooserCombo1.getSelectedDate().getTime();
            List lista = new ArrayList();
            DefaultTableModel modelo = (DefaultTableModel) jTable1.getModel();
            int c = 0;
            while (modelo.getRowCount() != c) {
                Object o=jTable1.getValueAt(c, 0);
                if (o != null) {
                    Registroacceso audi = (Registroacceso) o;
                    lista.add(audi);
                }
                c++;
            }
            if(filtro1.equals("DIA")){
            filtro1= filtro1+": "+fin.getDate();
            }else if(filtro1.equals("SEMANA")){
                filtro1= filtro1+" del dia: "+fin.getDate();
            }else if(filtro1.equals("MES")){
                filtro1= filtro1+": "+(fin.getMonth()+1);
            }else if(filtro1.equals("AÃ‘O")){
                filtro1= filtro1+": "+(fin.getYear()+1900);
            }
            Drive.mostrarReporte("Registro",lista,"Registro de acceso",filtro1,lista.size()); 
            jButton5.setEnabled(true);
            jButton2.setEnabled(true);
            jButton3.setEnabled(true);
        } catch (Exception Ex) {
            JOptionPane.showMessageDialog(null, "Ingrese correctamente los datos", "Error de impresion", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jTable2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable2MouseClicked
        jTable2.getModel();
        per=(Personal)jTable2.getValueAt(jTable2.rowAtPoint(evt.getPoint()), 0);
        Drive.LimpiarTabla(jTable1);
        Date dia= dateChooserCombo1.getSelectedDate().getTime();
        String buscar = (String) jComboBox2.getSelectedItem();
        Drive.CargarTablaRegistro(jTable1, per, dia, buscar);
        String hora=Drive.Obtenerhoras(jTable1);
        jLabel4.setText(hora);
    }//GEN-LAST:event_jTable2MouseClicked

    private void jTable2MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable2MouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_jTable2MouseEntered

    private void jTable2MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable2MouseReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_jTable2MouseReleased

    private void jComboBox2ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBox2ItemStateChanged
        try{
            Drive.LimpiarTabla(jTable1);
            Date dia= dateChooserCombo1.getSelectedDate().getTime();
            String buscar = (String) jComboBox2.getSelectedItem();
            Drive.CargarTablaRegistro(jTable1, per, dia, buscar);
            String hora=Drive.Obtenerhoras(jTable1);
            jLabel4.setText(hora);
            if(buscar.equals("DIA")){
            jLabel6.setText(String.valueOf(dia.getDate()));
            }else if(buscar.equals("SEMANA")){
                jLabel6.setText(String.valueOf(dia.getDate()));
            }else if(buscar.equals("MES")){
                jLabel6.setText(String.valueOf(dia.getMonth()+1));
            }else if(buscar.equals("AÃ‘O")){
                jLabel6.setText(String.valueOf(dia.getYear()));
            }
        }catch(Exception e){
            JOptionPane.showMessageDialog(null, "Error", "Error", JOptionPane.ERROR_MESSAGE);
        }
            
    }//GEN-LAST:event_jComboBox2ItemStateChanged

    private void dateChooserCombo1OnSelectionChange(datechooser.events.SelectionChangedEvent evt) {//GEN-FIRST:event_dateChooserCombo1OnSelectionChange
        Drive.LimpiarTabla(jTable1);
        Date dia= dateChooserCombo1.getSelectedDate().getTime();
        String buscar = (String) jComboBox2.getSelectedItem();
        Drive.CargarTablaRegistro(jTable1, per, dia, buscar);
        String hora=Drive.Obtenerhoras(jTable1);
        jLabel4.setText(hora);
        if(buscar.equals("DIA")){
        jLabel6.setText(String.valueOf(dia.getDate()));
        }else if(buscar.equals("SEMANA")){
            jLabel6.setText(String.valueOf(dia.getDate()));
        }else if(buscar.equals("MES")){
            jLabel6.setText(String.valueOf(dia.getMonth()+1));
        }else if(buscar.equals("AÃ‘O")){
            jLabel6.setText(String.valueOf(dia.getYear()));
        }
    }//GEN-LAST:event_dateChooserCombo1OnSelectionChange

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        int confirmado = JOptionPane.showConfirmDialog(null, "Â¿Desea volver al menÃº principal?", "Consultar Registro", JOptionPane.YES_NO_OPTION);
        if (JOptionPane.OK_OPTION == confirmado) {
            Frame vp = new JFramePrincipal(Drive,adm);
            this.dispose();
            vp.show();
        }
    }//GEN-LAST:event_formWindowClosing

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        try{
            DefaultTableModel modelo = (DefaultTableModel) jTable1.getModel();
            int e = 0;
            while (modelo.getRowCount() != e) {
                Object o=modelo.getValueAt(e, 0);
//                if(o!=null){
                Registroacceso reg = (Registroacceso) o;
//                }
                Object hor=modelo.getValueAt(e, 2);
                if(reg.getFin()==null){
                    if(hor!=null){
                        if(!hor.equals("  :  ")){
                            String hora=hor.toString();
                            String h  = hora.substring(0,2);  
                            String m  = hora.substring(3,5);  
                            int conta_hora = Integer.parseInt(h);  
                            int conta_minuto = Integer.parseInt(m);  
                            if(conta_hora > 23 || conta_minuto > 59) {  
                                JOptionPane.showMessageDialog(null, "Ingrese correctamente la hora en el registro NÂº: "+reg.getIdRegistroacceso() ,"Registrar salida",JOptionPane.ERROR_MESSAGE);  
                                return;  
                            }else{

                                SimpleDateFormat format= new SimpleDateFormat("HH:mm");
                                SimpleDateFormat formatfec= new SimpleDateFormat("dd/MM/yyy");
                                Date hhora=format.parse(hora);
                                if(hhora.compareTo(reg.getInicio())>=0){
                                    Date fec= reg.getFecha();
                                    java.sql.Date sqldate = new java.sql.Date(fec.getTime());
                                    boolean bandera=true;
                                    Iterator it=Drive.PERSISTENCIA.getRegistroaccesoss(sqldate, per.getIdPersonal()).iterator();
                                    while(it.hasNext()){
                                        Registroacceso ac= (Registroacceso) it.next();
                                        if(ac.getInicio().compareTo(reg.getInicio())>=0 && ac.getIdRegistroacceso()!=reg.getIdRegistroacceso()){
                                            if(ac.getInicio().compareTo(hhora)<0){
                                                bandera=false;
                                                break;
                                            }
                                        }
                                    }
                                    if(bandera==true){
                                        reg.setFin(hhora);
                                        reg.actualizarRegistroAcceso(reg);
                                        Calendar cal=Calendar.getInstance();
                                        cal.setTime(reg.getFecha());
//                                        cal.setTime(reg.getFecha());
//                                        cal.getTime().setHours(23);
//                                        cal.getTime().setMinutes(59);
//                                        cal.getTime().setSeconds(59);
                                        
                                        co.GuardarAsistencia(cal, per);
//                                        co.ObtenerListadeldia(cal);
                                    }else{
                                        JOptionPane.showMessageDialog(null, "Existe un ingreso anterior al horario ingresado","Registrar salida",JOptionPane.ERROR_MESSAGE);  
                                        Drive.LimpiarTabla(jTable1);
                                        Date dia= dateChooserCombo1.getSelectedDate().getTime();
                                        String buscar = (String) jComboBox2.getSelectedItem();
                                        Drive.CargarTablaRegistro(jTable1, per, dia, buscar);
                                        String horaaa=Drive.Obtenerhoras(jTable1);
                                        jLabel4.setText(horaaa);
                                    }
                                }else{
                                    JOptionPane.showMessageDialog(null, "La hora de salida debe ser menor a la hora de ingreso","Registrar salida",JOptionPane.ERROR_MESSAGE);  
                                    Drive.LimpiarTabla(jTable1);
                                    Date dia= dateChooserCombo1.getSelectedDate().getTime();
                                    String buscar = (String) jComboBox2.getSelectedItem();
                                    Drive.CargarTablaRegistro(jTable1, per, dia, buscar);
                                    String horaaa=Drive.Obtenerhoras(jTable1);
                                    jLabel4.setText(horaaa);
                                }
                            }
                        }
                    }
                }
                e++;
            }
            Drive.LimpiarTabla(jTable1);
            Date dia= dateChooserCombo1.getSelectedDate().getTime();
            String buscar = (String) jComboBox2.getSelectedItem();
            Drive.CargarTablaRegistro(jTable1, per, dia, buscar);
            String horaaa=Drive.Obtenerhoras(jTable1);
            jLabel4.setText(horaaa);
        }catch(Exception ex) {
            JOptionPane.showMessageDialog(null, "Ingrese correctamente los datos", "Guardar fin", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(JFrameRegistro.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(JFrameRegistro.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(JFrameRegistro.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(JFrameRegistro.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new JFrameRegistro().setVisible(true);
//            }
//        });
//    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private datechooser.beans.DateChooserCombo dateChooserCombo1;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton5;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JComboBox jComboBox2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
