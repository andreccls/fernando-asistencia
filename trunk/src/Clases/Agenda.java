package Clases;
// Generated 14/12/2012 20:39:39 by Hibernate Tools 3.2.1.GA


import java.util.Calendar;
import java.util.Date;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Set;
import javax.swing.JOptionPane;

/**
 * Agenda generated by hbm2java
 */
public class Agenda  implements java.io.Serializable {


     private AgendaId id;
     private Revista revista;
     private Personal personal;
     private Tarea tarea;
     private String comentario;
     private Set<Franco> francos = new HashSet<Franco>(0);
     private Set<Ano> anos = new HashSet<Ano>(0);

    public Agenda() {
    }

	
    public Agenda(AgendaId id, Revista revista, Personal personal, Tarea tarea) {
        this.id = id;
        this.revista = revista;
        this.personal = personal;
        this.tarea = tarea;
    }
    public Agenda(AgendaId id, Revista revista, Personal personal, Tarea tarea, String comentario, Set<Franco> francos, Set<Ano> anos) {
       this.id = id;
       this.revista = revista;
       this.personal = personal;
       this.tarea = tarea;
       this.comentario = comentario;
       this.francos = francos;
       this.anos = anos;
    }
   
    public AgendaId getId() {
        return this.id;
    }
    
    public void setId(AgendaId id) {
        this.id = id;
    }
    public Revista getRevista() {
        return this.revista;
    }
    
    public void setRevista(Revista revista) {
        this.revista = revista;
    }
    public Personal getPersonal() {
        return this.personal;
    }
    
    public void setPersonal(Personal personal) {
        this.personal = personal;
    }
    public Tarea getTarea() {
        return this.tarea;
    }
    
    public void setTarea(Tarea tarea) {
        this.tarea = tarea;
    }
    public String getComentario() {
        return this.comentario;
    }
    
    public void setComentario(String comentario) {
        this.comentario = comentario;
    }
    public Set<Franco> getFrancos() {
        return this.francos;
    }
    
    public void setFrancos(Set<Franco> francos) {
        this.francos = francos;
    }
    public Set<Ano> getAnos() {
        return this.anos;
    }
    
    public void setAnos(Set<Ano> anos) {
        this.anos = anos;
    }

//// GENERADO POR GONZALEZ FERNANDO
    
    
    public void guardarAgenda(Agenda unaAgenda){
        Controlador.getPERSISTENCIA().insert(this);

        JOptionPane.showMessageDialog(null,"La Agenda de la tarea "+ 
                String.valueOf(unaAgenda.getId().getIdTarea()) +
                " se guardo correctamente","Mensaje",JOptionPane.INFORMATION_MESSAGE);
    }
    
     public Dia getDia() {
        Date cal = Calendar.getInstance().getTime(); 
        Dia dia=new Dia();
        Iterator ita=anos.iterator();
            while(ita.hasNext()){
               Ano an=(Ano) ita.next();
               if(an.getAno()==cal.getYear()+1900){
                   Iterator itm=an.getMeses().iterator();
                   while(itm.hasNext()){
                       Mes me=(Mes) itm.next();
                       if(me.getMes() == cal.getMonth()){
                           Iterator itd=me.getDias().iterator();
                           while(itd.hasNext()){
                               Dia di=(Dia) itd.next();
                               if(di.getDia() == cal.getDate()){
                                   dia=di;
                                   break;
                               }
                           }
                       }
                   }
               }
           }
        return dia;
    }
    
     public Dia getDia2(Date cal) {
        Dia dia=new Dia();
        Iterator ita=anos.iterator();
            while(ita.hasNext()){
               Ano an=(Ano) ita.next();
               if(an.getAno()==cal.getYear()+1900){
                   Iterator itm=an.getMeses().iterator();
                   while(itm.hasNext()){
                       Mes me=(Mes) itm.next();
                       if(me.getMes() == cal.getMonth()){
                           Iterator itd=me.getDias().iterator();
                           while(itd.hasNext()){
                               Dia di=(Dia) itd.next();
                               if(di.getDia() == cal.getDate()){
                                   dia=di;
                                   break;
                               }
                           }
                       }
                   }
               }
           }
        return dia;
    }

    public void crearRevista(String nombre, Set<Agenda> agendas){
        Revista unaRevista=new Revista (nombre,agendas);
        //if(!existePersonal(unPersonal)){
            unaRevista.guardarRevista(unaRevista);
            //agregarReserva(unaReserva);
        //} 
     }

    public void crearAsistencia(Iniciofin iniciofin, Boolean estado, Boolean tardanza, Set<Justificacion> justificacions){
        Asistencia unaAsistencia=new Asistencia (iniciofin, estado,tardanza, justificacions);
        //if(!existePersonal(unPersonal)){
            unaAsistencia.guardarAsistencia(unaAsistencia);
            //agregarReserva(unaReserva);
        //} 
     }
    
//    public Dia getAsistencia(Agenda age) {
//        Date cal = Calendar.getInstance().getTime(); 
//        Dia dia=new Dia();
//        Iterator ita=age.getAnos().iterator();
//            while(ita.hasNext()){
//               Ano an=(Ano) ita.next();
//               if(an.getAno()==cal.getYear()+1900){
//                   Iterator itm=an.getMeses().iterator();
//                   while(itm.hasNext()){
//                       Mes me=(Mes) itm.next();
//                       if(me.getMes() == cal.getMonth()){
//                           Iterator itd=me.getDias().iterator();
//                           while(itd.hasNext()){
//                               Dia di=(Dia) itd.next();
//                               if(di.getDia() == cal.getDate()){
//                                   dia=di;
//                                   break;
//                               }
//                           }
//                       }
//                   }
//               }
//           }
//        return dia;
//    }
//    
//    /////////////////////////////////////////////////////////////////////
//
//    public Ano getAno(int id) {
//        Ano tar=null;
//        Iterator it=anos.iterator();
//           while(it.hasNext()){
//           Ano t=(Ano) it.next();
//           if(t.getIdAno()==id){
//               tar=t;
//               break;
//           }
//         }
//        return tar;
//    }
//    
//    public Ano existeAno(Ano unAno){
//          Ano tmpres=null;
//          Iterator it=anos.iterator();
//           while(it.hasNext()){
//           Ano an=(Ano) it.next();
//           if((an.getAno()==unAno.getAno()&&(an.getAgenda().getId().getIdPersonal()==unAno.getAgenda().getId().getIdPersonal())&&(an.getAgenda().getId().getIdTarea()==unAno.getAgenda().getId().getIdTarea()))){
//               tmpres=an;
//               break;
//           }
//         }
//         return tmpres;
//     }
//    
//    public int crearAno(Agenda agenda, Integer ano, Set<Mes> meses){
//        Ano unAno=new Ano(agenda, ano, meses);
//        Ano aux=existeAno(unAno);
//        if(aux==null){
//            unAno.guardarAno(unAno);
//            return unAno.getIdAno();
//        } else{return aux.getIdAno();}
//        
//     }


}


