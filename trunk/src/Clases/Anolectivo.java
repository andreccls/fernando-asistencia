package Clases;
// Generated 05-jul-2013 2:52:42 by Hibernate Tools 3.2.1.GA


import java.util.Date;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Set;

/**
 * Anolectivo generated by hbm2java
 */
public class Anolectivo  implements java.io.Serializable {


     private Integer idAnolectivo;
     private Establecimiento establecimiento;
     private Integer ano;
     private Date inicio;
     private Date fin;
     private Set<Declaracionjurada> declaracionjuradas = new HashSet<Declaracionjurada>(0);
     private Set<Feriado> feriados = new HashSet<Feriado>(0);
     private Set<Curso> cursos = new HashSet<Curso>(0);

    public Anolectivo() {
    }

	
    public Anolectivo(Establecimiento establecimiento) {
        this.establecimiento = establecimiento;
    }
    public Anolectivo(Establecimiento establecimiento, Integer ano, Date inicio, Date fin, Set<Declaracionjurada> declaracionjuradas, Set<Feriado> feriados, Set<Curso> cursos) {
       this.establecimiento = establecimiento;
       this.ano = ano;
       this.inicio = inicio;
       this.fin = fin;
       this.declaracionjuradas = declaracionjuradas;
       this.feriados = feriados;
       this.cursos = cursos;
    }
    
    @Override
    public String toString() {
        return String.valueOf(ano);
    }
   
    public Integer getIdAnolectivo() {
        return this.idAnolectivo;
    }
    
    public void setIdAnolectivo(Integer idAnolectivo) {
        this.idAnolectivo = idAnolectivo;
    }
    public Establecimiento getEstablecimiento() {
        return this.establecimiento;
    }
    
    public void setEstablecimiento(Establecimiento establecimiento) {
        this.establecimiento = establecimiento;
    }
    public Integer getAno() {
        return this.ano;
    }
    
    public void setAno(Integer ano) {
        this.ano = ano;
    }
    public Date getInicio() {
        return this.inicio;
    }
    
    public void setInicio(Date inicio) {
        this.inicio = inicio;
    }
    public Date getFin() {
        return this.fin;
    }
    
    public void setFin(Date fin) {
        this.fin = fin;
    }
    public Set<Declaracionjurada> getDeclaracionjuradas() {
        return this.declaracionjuradas;
    }
    
    public void setDeclaracionjuradas(Set<Declaracionjurada> declaracionjuradas) {
        this.declaracionjuradas = declaracionjuradas;
    }
    public Set<Feriado> getFeriados() {
        return this.feriados;
    }
    
    public void setFeriados(Set<Feriado> feriados) {
        this.feriados = feriados;
    }
    public Set<Curso> getCursos() {
        return this.cursos;
    }
    
    public void setCursos(Set<Curso> cursos) {
        this.cursos = cursos;
    }

/// GENERADO POR GONZALEZ FERNANDO
    public void guardarAnolectivo(Anolectivo unAnolectivo){
        Controlador.getPERSISTENCIA().insert(this);

//        JOptionPane.showMessageDialog(null,"El A침o "+ 
//                String.valueOf(unAno.getAno()) +
//                " se guardo correctamente","Mensaje",JOptionPane.INFORMATION_MESSAGE);
    }
    
    public void actualizarAnolectivo(Anolectivo unAnolectivo){
        Controlador.getPERSISTENCIA().update(this);

//        JOptionPane.showMessageDialog(null,"El A침o lectvo se actualiz칩 correctamente","Mensaje",JOptionPane.INFORMATION_MESSAGE);
    }
    
    public void eliminarAnolectivo(Anolectivo unAnolectivo){
        Controlador.getPERSISTENCIA().delete(this);

//        JOptionPane.showMessageDialog(null,"El A침o "+ 
//                String.valueOf(unAno.getAno()) +
//                " se guardo correctamente","Mensaje",JOptionPane.INFORMATION_MESSAGE);
    }
    
    public boolean existeFeriado(Date unafecha) {
        boolean tmpres = false;
        Iterator it = feriados.iterator();
        while (it.hasNext()) {
            Feriado fer = (Feriado) it.next();
            if (fer.getDia().compareTo(unafecha)==0) {
                tmpres = true;
                break;
            }
        }
        return tmpres;
    }


    public boolean ControlarAnolectivo(Date ini, Date fi){
        boolean bandera=true;
        Iterator it=cursos.iterator();
        while(it.hasNext()){
            Curso cu=(Curso) it.next();
            Iterator itt=cu.getDivisions().iterator();
            while(itt.hasNext()){
                Division div=(Division) itt.next();
                Iterator ittt=div.getTareas().iterator();
                while(ittt.hasNext()){
                    Tarea t=(Tarea) ittt.next();
                    if(t.getEstado()){
                        Date inicio=t.getDiaInicio();
                        Date fin=t.getDiaFin();
                        if(inicio.compareTo(ini)<=0||fin.compareTo(fi)>=0){
                            bandera=false;
                            break;
                        }
                    }
                }
            }
        }

    return bandera;
    }


}


