package Clases;
// Generated 25-abr-2013 14:00:44 by Hibernate Tools 3.2.1.GA


import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Set;
import javax.swing.DefaultListModel;
import javax.swing.JList;
import javax.swing.JOptionPane;

/**
 * Personal generated by hbm2java
 */
public class Personal  implements java.io.Serializable {


     private Integer idPersonal;
     private Tipodoc tipodoc;
     private Perfil perfil;
     private Establecimiento establecimiento;
     private byte[] codigo;
     private String dni;
     private String apellido;
     private String nombre;
     private String cuil;
     private String calle;
     private Integer altura;
     private String piso;
     private String depto;
     private String correoElectronico;
     private String sexo;
     private String estadoCivil;
     private Date ingreso;
     private Boolean estado;
     private Boolean familiar;
     private Date fechaNac;
     private Set<PersonalDepartamento> personalDepartamentos = new HashSet<PersonalDepartamento>(0);
     private Set<Registroacceso> registroaccesos = new HashSet<Registroacceso>(0);
     private Set<Declaracionjurada> declaracionjuradas = new HashSet<Declaracionjurada>(0);
     private Set<Circularpersonal> circularpersonals = new HashSet<Circularpersonal>(0);
     private Set<Personalnodocente> personalnodocentes = new HashSet<Personalnodocente>(0);
     private Set<PersonalFamiliar> personalFamiliarsForIdPersonal = new HashSet<PersonalFamiliar>(0);
     private Set<PersonalFamiliar> personalFamiliarsForIdFamiliar = new HashSet<PersonalFamiliar>(0);
     private Set<Personaldocente> personaldocentes = new HashSet<Personaldocente>(0);
     private Set<Agenda> agendas = new HashSet<Agenda>(0);
     private Set<Auditoria> auditoriasForIdAuditor = new HashSet<Auditoria>(0);
     private Set<Telefono> telefonos = new HashSet<Telefono>(0);
     private Set<Auditoria> auditoriasForIdPersonal = new HashSet<Auditoria>(0);

    public Personal() {
    }

	
    public Personal(Tipodoc tipodoc, Perfil perfil, Establecimiento establecimiento, String dni, String apellido, String nombre) {
        this.tipodoc = tipodoc;
        this.perfil = perfil;
        this.establecimiento = establecimiento;
        this.dni = dni;
        this.apellido = apellido;
        this.nombre = nombre;
    }
    public Personal(Tipodoc tipodoc, Perfil perfil, Establecimiento establecimiento, byte[] codigo, String dni, String apellido, String nombre, String cuil, String calle, Integer altura, String piso, String depto, String correoElectronico, String sexo, String estadoCivil, Date ingreso, Boolean estado, Boolean familiar, Date fechaNac, Set<PersonalDepartamento> personalDepartamentos, Set<Registroacceso> registroaccesos, Set<Declaracionjurada> declaracionjuradas, Set<Circularpersonal> circularpersonals, Set<Personalnodocente> personalnodocentes, Set<PersonalFamiliar> personalFamiliarsForIdPersonal, Set<PersonalFamiliar> personalFamiliarsForIdFamiliar, Set<Personaldocente> personaldocentes, Set<Agenda> agendas, Set<Auditoria> auditoriasForIdAuditor, Set<Telefono> telefonos, Set<Auditoria> auditoriasForIdPersonal) {
       this.tipodoc = tipodoc;
       this.perfil = perfil;
       this.establecimiento = establecimiento;
       this.codigo = codigo;
       this.dni = dni;
       this.apellido = apellido;
       this.nombre = nombre;
       this.cuil = cuil;
       this.calle = calle;
       this.altura = altura;
       this.piso = piso;
       this.depto = depto;
       this.correoElectronico = correoElectronico;
       this.sexo = sexo;
       this.estadoCivil = estadoCivil;
       this.ingreso = ingreso;
       this.estado = estado;
       this.familiar = familiar;
       this.fechaNac = fechaNac;
       this.personalDepartamentos = personalDepartamentos;
       this.registroaccesos = registroaccesos;
       this.declaracionjuradas = declaracionjuradas;
       this.circularpersonals = circularpersonals;
       this.personalnodocentes = personalnodocentes;
       this.personalFamiliarsForIdPersonal = personalFamiliarsForIdPersonal;
       this.personalFamiliarsForIdFamiliar = personalFamiliarsForIdFamiliar;
       this.personaldocentes = personaldocentes;
       this.agendas = agendas;
       this.auditoriasForIdAuditor = auditoriasForIdAuditor;
       this.telefonos = telefonos;
       this.auditoriasForIdPersonal = auditoriasForIdPersonal;
    }
   
    @Override
    public String toString() {
        return apellido+" "+nombre;
    }
    
    public Integer getIdPersonal() {
        return this.idPersonal;
    }
    
    public void setIdPersonal(Integer idPersonal) {
        this.idPersonal = idPersonal;
    }
    public Tipodoc getTipodoc() {
        return this.tipodoc;
    }
    
    public void setTipodoc(Tipodoc tipodoc) {
        this.tipodoc = tipodoc;
    }
    public Perfil getPerfil() {
        return this.perfil;
    }
    
    public void setPerfil(Perfil perfil) {
        this.perfil = perfil;
    }
    public Establecimiento getEstablecimiento() {
        return this.establecimiento;
    }
    
    public void setEstablecimiento(Establecimiento establecimiento) {
        this.establecimiento = establecimiento;
    }
    public byte[] getCodigo() {
        return this.codigo;
    }
    
    public void setCodigo(byte[] codigo) {
        this.codigo = codigo;
    }
    public String getDni() {
        return this.dni;
    }
    
    public void setDni(String dni) {
        this.dni = dni;
    }
    public String getApellido() {
        return this.apellido;
    }
    
    public void setApellido(String apellido) {
        this.apellido = apellido;
    }
    public String getNombre() {
        return this.nombre;
    }
    
    public void setNombre(String nombre) {
        this.nombre = nombre;
    }
    public String getCuil() {
        return this.cuil;
    }
    
    public void setCuil(String cuil) {
        this.cuil = cuil;
    }
    public String getCalle() {
        return this.calle;
    }
    
    public void setCalle(String calle) {
        this.calle = calle;
    }
    public Integer getAltura() {
        return this.altura;
    }
    
    public void setAltura(Integer altura) {
        this.altura = altura;
    }
    public String getPiso() {
        return this.piso;
    }
    
    public void setPiso(String piso) {
        this.piso = piso;
    }
    public String getDepto() {
        return this.depto;
    }
    
    public void setDepto(String depto) {
        this.depto = depto;
    }
    public String getCorreoElectronico() {
        return this.correoElectronico;
    }
    
    public void setCorreoElectronico(String correoElectronico) {
        this.correoElectronico = correoElectronico;
    }
    public String getSexo() {
        return this.sexo;
    }
    
    public void setSexo(String sexo) {
        this.sexo = sexo;
    }
    public String getEstadoCivil() {
        return this.estadoCivil;
    }
    
    public void setEstadoCivil(String estadoCivil) {
        this.estadoCivil = estadoCivil;
    }
    public Date getIngreso() {
        return this.ingreso;
    }
    
    public void setIngreso(Date ingreso) {
        this.ingreso = ingreso;
    }
    public Boolean getEstado() {
        return this.estado;
    }
    
    public void setEstado(Boolean estado) {
        this.estado = estado;
    }
    public Boolean getFamiliar() {
        return this.familiar;
    }
    
    public void setFamiliar(Boolean familiar) {
        this.familiar = familiar;
    }
    public Date getFechaNac() {
        return this.fechaNac;
    }
    
    public void setFechaNac(Date fechaNac) {
        this.fechaNac = fechaNac;
    }
    public Set<PersonalDepartamento> getPersonalDepartamentos() {
        return this.personalDepartamentos;
    }
    
    public void setPersonalDepartamentos(Set<PersonalDepartamento> personalDepartamentos) {
        this.personalDepartamentos = personalDepartamentos;
    }
    public Set<Registroacceso> getRegistroaccesos() {
        return this.registroaccesos;
    }
    
    public void setRegistroaccesos(Set<Registroacceso> registroaccesos) {
        this.registroaccesos = registroaccesos;
    }
    public Set<Declaracionjurada> getDeclaracionjuradas() {
        return this.declaracionjuradas;
    }
    
    public void setDeclaracionjuradas(Set<Declaracionjurada> declaracionjuradas) {
        this.declaracionjuradas = declaracionjuradas;
    }
    public Set<Circularpersonal> getCircularpersonals() {
        return this.circularpersonals;
    }
    
    public void setCircularpersonals(Set<Circularpersonal> circularpersonals) {
        this.circularpersonals = circularpersonals;
    }
    public Set<Personalnodocente> getPersonalnodocentes() {
        return this.personalnodocentes;
    }
    
    public void setPersonalnodocentes(Set<Personalnodocente> personalnodocentes) {
        this.personalnodocentes = personalnodocentes;
    }
    public Set<PersonalFamiliar> getPersonalFamiliarsForIdPersonal() {
        return this.personalFamiliarsForIdPersonal;
    }
    
    public void setPersonalFamiliarsForIdPersonal(Set<PersonalFamiliar> personalFamiliarsForIdPersonal) {
        this.personalFamiliarsForIdPersonal = personalFamiliarsForIdPersonal;
    }
    public Set<PersonalFamiliar> getPersonalFamiliarsForIdFamiliar() {
        return this.personalFamiliarsForIdFamiliar;
    }
    
    public void setPersonalFamiliarsForIdFamiliar(Set<PersonalFamiliar> personalFamiliarsForIdFamiliar) {
        this.personalFamiliarsForIdFamiliar = personalFamiliarsForIdFamiliar;
    }
    public Set<Personaldocente> getPersonaldocentes() {
        return this.personaldocentes;
    }
    
    public void setPersonaldocentes(Set<Personaldocente> personaldocentes) {
        this.personaldocentes = personaldocentes;
    }
    public Set<Agenda> getAgendas() {
        return this.agendas;
    }
    
    public void setAgendas(Set<Agenda> agendas) {
        this.agendas = agendas;
    }
    public Set<Auditoria> getAuditoriasForIdAuditor() {
        return this.auditoriasForIdAuditor;
    }
    
    public void setAuditoriasForIdAuditor(Set<Auditoria> auditoriasForIdAuditor) {
        this.auditoriasForIdAuditor = auditoriasForIdAuditor;
    }
    public Set<Telefono> getTelefonos() {
        return this.telefonos;
    }
    
    public void setTelefonos(Set<Telefono> telefonos) {
        this.telefonos = telefonos;
    }
    public Set<Auditoria> getAuditoriasForIdPersonal() {
        return this.auditoriasForIdPersonal;
    }
    
    public void setAuditoriasForIdPersonal(Set<Auditoria> auditoriasForIdPersonal) {
        this.auditoriasForIdPersonal = auditoriasForIdPersonal;
    }

// GENERADO POR GONZALEZ FERNANDO
    
    public int guardarPersonal(Personal unPersonal){
        Controlador.getPERSISTENCIA().insertstring(this);
        JOptionPane.showMessageDialog(null,"La persona fue registrada correctamente","Registro de Persona",JOptionPane.INFORMATION_MESSAGE);
        return unPersonal.getIdPersonal();
    }
    
    public void actualizarPersonal(Personal unPersonal){
        Controlador.getPERSISTENCIA().update(this);
        JOptionPane.showMessageDialog(null,"La persona se actualizó correctamente","Actualización de Persona",JOptionPane.INFORMATION_MESSAGE);
    }

    public Personaldocente getPersonaldoc(int idperdoc) {
        Personaldocente per=new Personaldocente();
        Iterator it=personaldocentes.iterator();
           while(it.hasNext()){
           Personaldocente p=(Personaldocente) it.next();
           System.out.println("Personal que tengo "+p.getId().getIdDocente());
           if(idperdoc==p.getId().getIdPersonal()){
               //System.out.println("Existe el cliente   =" + String.valueOf(c.equals(unCliente)));
               per=p;
               break;
           }
         }
        return per;
    }
    
    public void crearPersonaldoc(PersonaldocenteId id, Personal personal, Integer cargohoras, Integer antiguedadDoc){
        Personaldocente unPersonaldoc=new Personaldocente(id,personal,cargohoras,antiguedadDoc);
        //if(!existePersonal(unPersonal)){
            unPersonaldoc.guardarPersonaldoc(unPersonaldoc);
            //agregarReserva(unaReserva);
        //} 
     }
    
//    public void actualizarPersonaldoc(PersonaldocenteId id, Personal personal, Integer cargohoras, Integer antiguedadDoc){
//        Personaldocente unPersonaldoc=new Personaldocente(id,personal,cargohoras,antiguedadDoc);
//        //if(!existePersonal(unPersonal)){
//            unPersonaldoc.actualizarPersonaldoc(unPersonaldoc);
//            //agregarReserva(unaReserva);
//        //} 
//     }
    
    public Personalnodocente getPersonalnodoc(int idperdoc) {
        Personalnodocente per=new Personalnodocente();
        Iterator it=personalnodocentes.iterator();
           while(it.hasNext()){
           Personalnodocente p=(Personalnodocente) it.next();
           System.out.println("Personal que tengo "+p.getId().getIdNodocente());
           if(idperdoc==p.getId().getIdPersonal()){
               //System.out.println("Existe el cliente   =" + String.valueOf(c.equals(unCliente)));
               per=p;
               break;
           }
         }
        return per;
    }
    
    public void crearPersonalnodoc(PersonalnodocenteId id, Personal personal, Actividad actividad){
        Personalnodocente unPersonalnodocente=new Personalnodocente (id, personal, actividad);
        //if(!existePersonal(unPersonal)){
            unPersonalnodocente.guardarPersonalnodoc(unPersonalnodocente);
            //agregarReserva(unaReserva);
        //} 
     }
    
//     public void actualizarPersonalnodoc(PersonalnodocenteId id, Personal personal, Actividad actividad){
//        Personalnodocente unPersonalnodocente=new Personalnodocente (id, personal, actividad);
//        //if(!existePersonal(unPersonal)){
//            unPersonalnodocente.actualizarPersonalnodoc(unPersonalnodocente);
//            //agregarReserva(unaReserva);
//        //} 
//     }

     public Boolean getEstadoPersonalFamiliar(Personal per, Personal otro) {
        Boolean bandera=false;
        Iterator<PersonalFamiliar> it=per.personalFamiliarsForIdPersonal.iterator();
           while(it.hasNext()){
           PersonalFamiliar perfam= it.next();
           Personal pp= perfam.getPersonalByIdFamiliar();
           if(pp.getEstado()==true && pp.getFamiliar()==true){
               int id1=pp.getIdPersonal();
               int id2=otro.getIdPersonal();
               if(id1 != id2){
                   bandera=true;
                   break;
               }
           }
         }
        return bandera;
    }
     
     public PersonalFamiliar getPersonalFamiliar(Personal per, Personal otro) {
        Iterator<PersonalFamiliar> it= per.personalFamiliarsForIdPersonal.iterator();
        PersonalFamiliar bandera=new PersonalFamiliar();
           while(it.hasNext()){
           PersonalFamiliar perfam=(PersonalFamiliar) it.next();
           if(perfam.getId().getIdFamiliar()== otro.getIdPersonal()){
                   bandera=perfam;
                   break;
           }
         }
        return bandera;
    }
     
    public void crearPersonalFamiliar(PersonalFamiliarId id, Personal personalByIdPersonal, Personal personalByIdFamiliar, Tiporelacion tiporelacion, Boolean asignacionFamiliar){
        PersonalFamiliar unPersonalFamiliar=new PersonalFamiliar (id, personalByIdPersonal, personalByIdFamiliar, tiporelacion,asignacionFamiliar);
        unPersonalFamiliar.guardarPersonalFamiliar(unPersonalFamiliar);
        //PersonalFamiliar per=unPersonalFamiliar;

     }
    
    public void crearDeclaracionjurada(Personal personal, Establecimiento establecimiento, int ano, String observacion, Set<DetalleEstablecimiento> detalleEstablecimientos){
        Declaracionjurada unaDeclaracionjurada=new Declaracionjurada (personal, establecimiento, ano, observacion, detalleEstablecimientos);
        //if(!existePersonal(unPersonal)){
            unaDeclaracionjurada.guardarDeclaracionjurada(unaDeclaracionjurada);
            //agregarReserva(unaReserva);
        //} 
     }
    
    public void crearTelefono(Personal personal, String nombre, String numero){
        Telefono unTelefono=new Telefono (personal, nombre, numero);
        //if(!existePersonal(unPersonal)){
            unTelefono.guardarTelefono(unTelefono);
            //agregarReserva(unaReserva);
        //} 
     }
//    public void actualizarTelefono(Personal personal, String nombre, String numero){
//        Telefono unTelefono=new Telefono (personal, nombre, numero);
//        //if(!existePersonal(unPersonal)){
//            unTelefono.actualizarTelefono(unTelefono);
//            //agregarReserva(unaReserva);
//        //} 
//     }
    
    
    public void crearPersonaldepartamento(PersonalDepartamentoId id, Departamento departamento, Personal personal, Boolean jefe){
        PersonalDepartamento unPersonalDepartamento=new PersonalDepartamento (id, departamento, personal, jefe);
        //if(!existePersonal(unPersonal)){
            unPersonalDepartamento.guardarPersonalDepartamento(unPersonalDepartamento);
            //agregarReserva(unaReserva);
        //} 
     }
    
    public void actualizarPersonaldepartamento(PersonalDepartamentoId id, Departamento departamento, Personal personal, Boolean jefe){
        PersonalDepartamento unPersonalDepartamento=new PersonalDepartamento (id, departamento, personal, jefe);
        //if(!existePersonal(unPersonal)){
            unPersonalDepartamento.actualizarPersonalDepartamento(unPersonalDepartamento);
            //agregarReserva(unaReserva);
        //} 
     }
    
    public void CargarListTelefono(JList Jlist,DefaultListModel modeloLista){
        try {
            //DefaultListModel modeloLista = new DefaultListModel();
            Iterator rs= telefonos.iterator();
            while (rs.hasNext()) {
                Telefono tel=(Telefono) rs.next();
                modeloLista.addElement(tel);
                Jlist.setModel(modeloLista);
            }
        } catch (Exception ex) {
             JOptionPane.showMessageDialog(null, ex.toString());
        }
    }

    public void CargarListDepartamento(JList Jlist,DefaultListModel modeloLista){
        try {
            //DefaultListModel modeloLista = new DefaultListModel();
            Iterator rs= personalDepartamentos.iterator();
            while (rs.hasNext()) {
                PersonalDepartamento perdepto=(PersonalDepartamento) rs.next();
                modeloLista.addElement(perdepto);
                Jlist.setModel(modeloLista);
            }
        } catch (Exception ex) {
             JOptionPane.showMessageDialog(null, ex.toString());
        }
    }

    public String ObtenerDia(int i){
    String dia=null;
    if(i==0){
        dia="DOMINGO";
    }else if(i==1){
        dia="LUNES";
    }else if(i==2){
        dia="MARTES";
    }else if(i==3){
        dia="MIERCOLES";
    }else if(i==4){
        dia="JUEVES";
    }else if(i==5){
        dia="VIERNES";
    }else if(i==6){
        dia="SABADO";
    }
    return dia;
    }
    
    ///REUNIONES
    // <editor-fold defaultstate="collapsed" desc="REUNIONES"> 
    public int ReunionVerificarDisponibilidad (Date diaini,Date hini,Date hfin, boolean control){
        int band=1;
        try {
            if (!Controlador.PERSISTENCIA.getAgendas(idPersonal).isEmpty()) {
                Iterator it = Controlador.PERSISTENCIA.getAgendas(idPersonal).iterator();
                while (it.hasNext()) {
                    Agenda age = (Agenda) it.next();
                    if (age.getPersonal().getEstado() == true && age.getTarea().getEstado() == true) {
                        if(age.getTarea().getTareaotros().iterator().hasNext()){
                            Tareaotro tarot=age.getTarea().getTareaotros().iterator().next();
                            Date inicio=tarot.getDiaInicio();
                            Date fin=tarot.getDiaFin();
                            if(diaini.compareTo(inicio)>=0 && diaini.compareTo(fin)<=0){
                                Date hinicio = tarot.getDiaInicio();
                                Date hhfin = tarot.getDiaFin();
                                if(hini.compareTo(hinicio)<=0&&hfin.compareTo(hinicio)>=0){
                                    band = 1;
                                    if(control==true){JOptionPane.showMessageDialog(null, "El personal "+ toString() +" tiene otra tarea no obligatoria", "Registrar Reunión", JOptionPane.INFORMATION_MESSAGE);}
                                    //return band;
                                }else if(hini.compareTo(hhfin)<=0&&hfin.compareTo(hhfin)>=0){
                                    band = 1;
                                    if(control==true){JOptionPane.showMessageDialog(null, "El personal "+ toString() +" tiene otra tarea no obligatoria", "Registrar Reunión", JOptionPane.INFORMATION_MESSAGE);}
                                    //return band;
                                }else if(hini.compareTo(hinicio)>=0&&hfin.compareTo(hinicio)>=0&&hini.compareTo(hhfin)<=0&&hfin.compareTo(hhfin)<=0){
                                    band = 1;
                                    if(control==true){JOptionPane.showMessageDialog(null, "El personal "+ toString() +" tiene otra tarea no obligatoria", "Registrar Reunión", JOptionPane.INFORMATION_MESSAGE);}
                                    //return band;
                                }
                            }
                        }else if(age.getTarea().getTareaextracurriculars().iterator().hasNext()){
                            Tareaextracurricular tarot=age.getTarea().getTareaextracurriculars().iterator().next();
                            Date inicio=tarot.getDiaInicio();
                            Date fin=tarot.getDiaFin();
                            hini.setYear(diaini.getYear());
                            hini.setMonth(diaini.getMonth());
                            hini.setDate(diaini.getDate());
                            hfin.setYear(diaini.getYear());
                            hfin.setMonth(diaini.getMonth());
                            hfin.setDate(diaini.getDate());
                            if(hini.compareTo(inicio)<=0&&hfin.compareTo(inicio)>=0){
                                band = 0;
                                if(control==true){JOptionPane.showMessageDialog(null, "No existe disponibilidad de horario para "+ toString() +" porque existe una tarea extracurricular a ese horario", "Registrar Reunión", JOptionPane.ERROR_MESSAGE);}
                                return band;
                            }else if(hini.compareTo(fin)<=0&&hfin.compareTo(fin)>=0){
                                band = 0;
                                if(control==true){JOptionPane.showMessageDialog(null, "No existe disponibilidad de horario para "+ toString() +" porque existe una tarea extracurricular a ese horario", "Registrar Reunión", JOptionPane.ERROR_MESSAGE);}
                                return band;
                            }else if(hini.compareTo(inicio)>=0&&hfin.compareTo(inicio)>=0&&hini.compareTo(fin)<=0&&hfin.compareTo(fin)<=0){
                                band = 0;
                                if(control==true){JOptionPane.showMessageDialog(null, "No existe disponibilidad de horario para "+ toString() +" porque existe una tarea extracurricular a ese horario", "Registrar Reunión", JOptionPane.ERROR_MESSAGE);}
                                return band;
                            }else if(hini.compareTo(inicio)<=0&&hfin.compareTo(fin)>=0){
                                band = 0;
                                if(control==true){JOptionPane.showMessageDialog(null, "No existe disponibilidad de horario para "+ toString() +" porque existe una tarea extracurricular a ese horario", "Registrar Reunión", JOptionPane.ERROR_MESSAGE);}
                                return band;
                            }
                        }else if(age.getTarea().getTareaclases().iterator().hasNext()){
                            Dia di = age.getDia2(diaini);
                            if (di.getIdDia() != null) {
                                Iterator itin = di.getIniciofins().iterator();
                                while (itin.hasNext()) {
                                    Iniciofin in = (Iniciofin) itin.next();
                                    SimpleDateFormat formateador = new SimpleDateFormat("HH:mm");
                                    String i=formateador.format(in.getInicio());
                                    String ii=formateador.format(in.getFin());
                                    Date inicio = formateador.parse(i);
                                    Date fin = formateador.parse(ii);
                                    if(hini.compareTo(inicio)<=0&&hfin.compareTo(inicio)>=0){
                                        if(control==true){
                                            JOptionPane.showMessageDialog(null, "El personal "+ toString() +" continuará con su clase luego de realizar la reunión", "Registrar Reunión", JOptionPane.INFORMATION_MESSAGE);
                                            band = 1;
                                            //return band;
                                        }
                                        in.setEstadoInicio(true);
                                        in.actualizarIniciofin(in);
                                    }else if(hini.compareTo(fin)<=0&&hfin.compareTo(fin)>=0){
                                        if(control==true){
                                            JOptionPane.showMessageDialog(null, "El personal "+ toString() +" suspenderá su clase para realizar la reunión", "Registrar Reunión", JOptionPane.INFORMATION_MESSAGE);
                                            band = 1;
                                            //return band;
                                        }
                                        in.setEstadoFin(true);
                                        in.actualizarIniciofin(in);
                                    }else if(hini.compareTo(inicio)>=0&&hfin.compareTo(inicio)>=0&&hini.compareTo(fin)<=0&&hfin.compareTo(fin)<=0){
                                        if(control==true){
                                            JOptionPane.showMessageDialog(null, "El personal "+ toString() +" suspenderá su clase para realizar la reunión", "Registrar Reunión", JOptionPane.INFORMATION_MESSAGE);
                                            band = 2;
                                            //return band;
                                        }
                                    }else if(hini.compareTo(inicio)<=0&&hfin.compareTo(inicio)>=0&&hini.compareTo(fin)<=0&&hfin.compareTo(fin)>=0){
                                        if(control==true){
                                            JOptionPane.showMessageDialog(null, "El personal "+ toString() +" suspenderá su clase para realizar la reunión", "Registrar Reunión", JOptionPane.INFORMATION_MESSAGE);
                                            band = 1;
                                            //return band;
                                        }
                                        in.setEstadoInicio(true);
                                        in.setEstadoFin(true);
                                    }
                                }
                            }
                        }else if(age.getTarea().getTareareunions().iterator().hasNext()){
                            Dia di = age.getDia2(diaini);
                            if (di.getIdDia() != null) {
                                Iterator itin = di.getIniciofins().iterator();
                                while (itin.hasNext()) {
                                    Iniciofin in = (Iniciofin) itin.next();
                                    SimpleDateFormat formateador = new SimpleDateFormat("HH:mm");
                                    String i=formateador.format(in.getInicio());
                                    String ii=formateador.format(in.getFin());
                                    Date inicio = formateador.parse(i);
                                    Date fin = formateador.parse(ii);
                                    if (hini.compareTo(inicio) <= 0 && hfin.compareTo(inicio) >= 0) {
                                        band = 0;
                                        if(control==true){JOptionPane.showMessageDialog(null, "No existe disponibilidad de horario para " + toString() + " porque existe otra reunión a ese horario", "Registrar Reunión", JOptionPane.ERROR_MESSAGE);}
                                        return band;
                                    } else if (hini.compareTo(fin) <= 0 && hfin.compareTo(fin) >= 0) {
                                        band = 0;
                                        if(control==true){JOptionPane.showMessageDialog(null, "No existe disponibilidad de horario para " + toString() + " porque existe otra reunión a ese horario", "Registrar Reunión", JOptionPane.ERROR_MESSAGE);}
                                        return band;
                                    } else if (hini.compareTo(inicio) >= 0 && hfin.compareTo(inicio) >= 0 && hini.compareTo(fin) <= 0 && hfin.compareTo(fin) <= 0) {
                                        band = 0;
                                        if(control==true){JOptionPane.showMessageDialog(null, "No existe disponibilidad de horario para " + toString() + " porque existe otra reunión a ese horario", "Registrar Reunión", JOptionPane.ERROR_MESSAGE);}
                                        return band;
                                    }
                                }
                            }
                        }
                    }
                }
            }
            
            if(!declaracionjuradas.isEmpty()){
                Date diaux=diaini;
                    String di= ObtenerDia(diaux.getDay());
                    Iterator itact=declaracionjuradas.iterator().next().ObtenerActivos(di).iterator();
                    while(itact.hasNext()){
                        Activo act=(Activo) itact.next();
                        Iterator itin=act.getActivoIniciofins().iterator();
                        while(itin.hasNext()){
                            ActivoIniciofin in=(ActivoIniciofin) itin.next();
                            if (hini.compareTo(in.getInicio()) <= 0 && hfin.compareTo(in.getInicio()) >= 0) {
                                band=0;
                                if(control==true){JOptionPane.showMessageDialog(null,"no existe disponibilidad por parte de la declaración jurada a ese horario", "Registrar Reunión", JOptionPane.ERROR_MESSAGE);}
                                return band;
                            } else if (hini.compareTo(in.getFin()) <= 0 && hfin.compareTo(in.getFin()) >= 0) {
                                band=0;
                                if(control==true){JOptionPane.showMessageDialog(null,"no existe disponibilidad por parte de la declaración jurada a ese horario", "Registrar Reunión", JOptionPane.ERROR_MESSAGE);}
                                return band;
                            } else if (hini.compareTo(in.getInicio()) >= 0 && hfin.compareTo(in.getInicio()) >= 0 && hini.compareTo(in.getFin()) <= 0 && hfin.compareTo(in.getFin()) <= 0) {
                                band=0;
                                if(control==true){JOptionPane.showMessageDialog(null,"no existe disponibilidad por parte de la declaración jurada a ese horario", "Registrar Reunión", JOptionPane.ERROR_MESSAGE);}
                                return band;
                            }
                        }
                    }
            }
        }catch(Exception ex){JOptionPane.showMessageDialog(null, ex.toString());}
        return band;
    }
    // </editor-fold>
    
    ///EXTRACURRICULARES
    // <editor-fold defaultstate="collapsed" desc="EXTRACURRICULARES"> 
    public int ExtracurricularVerificarDisponibilidad (Date diaini,Date hini,Date hfin,Date diafin,boolean control){
        int band=1;
        try {
            if (!Controlador.PERSISTENCIA.getAgendas(idPersonal).isEmpty()) {
                Iterator it = Controlador.PERSISTENCIA.getAgendas(idPersonal).iterator();
                while (it.hasNext()) {
                    Agenda age = (Agenda) it.next();
                    if (age.getPersonal().getEstado() == true && age.getTarea().getEstado() == true) {
                        if(age.getTarea().getTareaotros().iterator().hasNext()){
                            Tareaotro tarot=age.getTarea().getTareaotros().iterator().next();
                            Date inicio=tarot.getDiaInicio();
                            Date fin=tarot.getDiaFin();
                            if(diaini.compareTo(inicio)>=0 ||diafin.compareTo(inicio)>= 0 && diaini.compareTo(fin)<=0 || diafin.compareTo(fin)<=0){
                                Date hinicio = tarot.getDiaInicio();
                                Date hhfin = tarot.getDiaFin();
                                if(hini.compareTo(hinicio)<=0&&hfin.compareTo(hinicio)>=0){
                                    band = 1;
                                    if(control==true){JOptionPane.showMessageDialog(null, "El personal "+ toString() +" tiene una tarea no obligatoria a este horario", "Registrar Tarea Extracurricular", JOptionPane.ERROR_MESSAGE);}
                                    //return band;
                                }else if(hini.compareTo(hhfin)<=0&&hfin.compareTo(hhfin)>=0){
                                    band = 1;
                                    if(control==true){JOptionPane.showMessageDialog(null, "El personal "+ toString() +" tiene una tarea no obligatoria a este horario", "Registrar Tarea Extracurricular", JOptionPane.ERROR_MESSAGE);}
                                    //return band;
                                }else if(hini.compareTo(hinicio)>=0&&hfin.compareTo(hinicio)>=0&&hini.compareTo(hhfin)<=0&&hfin.compareTo(hhfin)<=0){
                                    band = 1;
                                    if(control==true){JOptionPane.showMessageDialog(null, "El personal "+ toString() +" tiene una tarea no obligatoria a este horario", "Registrar Tarea Extracurricular", JOptionPane.ERROR_MESSAGE);}
                                    //return band;
                                }
                            }
                        }else if(age.getTarea().getTareaextracurriculars().iterator().hasNext()){
                            Tareaextracurricular tarot=age.getTarea().getTareaextracurriculars().iterator().next();
                            Date inicio=tarot.getDiaInicio();
                            Date fin=tarot.getDiaFin();
                            if(diaini.compareTo(inicio)>=0 ||diafin.compareTo(inicio)>= 0 && diaini.compareTo(fin)<=0 || diafin.compareTo(fin)<=0){
                                Date hinicio = tarot.getDiaInicio();
                                Date hhfin = tarot.getDiaFin();
                                if(hini.compareTo(hinicio)<=0&&hfin.compareTo(hinicio)>=0){
                                    band = 0;
                                    if(control==true){JOptionPane.showMessageDialog(null, "No existe disponibilidad de horario para "+ toString() +" porque existe una tarea extracurricular a ese horario", "Registrar Tarea Extracurricular", JOptionPane.ERROR_MESSAGE);}
                                    return band;
                                }else if(hini.compareTo(hhfin)<=0&&hfin.compareTo(hhfin)>=0){
                                    band = 0;
                                    if(control==true){JOptionPane.showMessageDialog(null, "No existe disponibilidad de horario para "+ toString() +" porque existe una tarea extracurricular a ese horario", "Registrar Tarea Extracurricular", JOptionPane.ERROR_MESSAGE);}
                                    return band;
                                }else if(hini.compareTo(hinicio)>=0&&hfin.compareTo(hinicio)>=0&&hini.compareTo(hhfin)<=0&&hfin.compareTo(hhfin)<=0){
                                    band = 0;
                                    if(control==true){JOptionPane.showMessageDialog(null, "No existe disponibilidad de horario para "+ toString() +" porque existe una tarea extracurricular a ese horario", "Registrar Tarea Extracurricular", JOptionPane.ERROR_MESSAGE);}
                                    return band;
                                }
                            }
                        }else if(age.getTarea().getTareaclases().iterator().hasNext()){
                            Date diaaux = diaini;
                            if (diaini.getYear()==diafin.getYear()&&diaini.getMonth()==diafin.getMonth()&&diaini.getDate()==diafin.getDate()) {
                                Dia di = age.getDia2(diaaux);
                                if (di.getIdDia() != null) {
                                    Iterator itin = di.getIniciofins().iterator();
                                    while (itin.hasNext()) {
                                        Iniciofin in = (Iniciofin) itin.next();
                                        SimpleDateFormat formateador = new SimpleDateFormat("HH:mm");
                                        String i=formateador.format(in.getInicio());
                                        String ii=formateador.format(in.getFin());
                                        Date inicio = formateador.parse(i);
                                        Date fin = formateador.parse(ii);
                                        if(hini.compareTo(inicio)<=0&&hfin.compareTo(inicio)>=0){
                                            if(control==true){
                                                JOptionPane.showMessageDialog(null, "El personal "+ toString() +" continuará con su clase luego de realizar la tarea", "Registrar Tarea Extracurricular", JOptionPane.INFORMATION_MESSAGE);
                                                band = 1;
                                                //return band;
                                            }
                                            in.setEstadoInicio(true);
                                            in.actualizarIniciofin(in);
                                        }else if(hini.compareTo(fin)<=0&&hfin.compareTo(fin)>=0){
                                            if(control==true){
                                                JOptionPane.showMessageDialog(null, "El personal "+ toString() +" suspenderá su clase para realizar la tarea", "Registrar Tarea Extracurricular", JOptionPane.INFORMATION_MESSAGE);
                                                band = 1;
                                                //return band;
                                            }
                                            in.setEstadoFin(true);
                                            in.actualizarIniciofin(in);
                                        }else if(hini.compareTo(inicio)>=0&&hfin.compareTo(inicio)>=0&&hini.compareTo(fin)<=0&&hfin.compareTo(fin)<=0){
                                            if(control==true){
                                                JOptionPane.showMessageDialog(null, "El personal "+ toString() +" suspenderá su clase para realizar la tarea", "Registrar Tarea Extracurricular", JOptionPane.INFORMATION_MESSAGE);
                                                band = 2;
                                                //return band;
                                            }
                                        }else if(hini.compareTo(inicio)<=0&&hfin.compareTo(inicio)>=0&&hini.compareTo(fin)<=0&&hfin.compareTo(fin)>=0){
                                            if(control==true){
                                                JOptionPane.showMessageDialog(null, "El personal "+ toString() +" suspenderá su clase para realizar la tarea", "Registrar Tarea Extracurricular", JOptionPane.INFORMATION_MESSAGE);
                                                band = 1;
                                                //return band;
                                            }
                                            in.setEstadoInicio(true);
                                            in.setEstadoFin(true);
                                        }
                                    }
                                }
                            } else {
                                while (diaaux.compareTo(diafin) <= 0) {
                                    Dia di = age.getDia2(diaaux);
                                    if (di.getIdDia() != null) {
                                        Iterator itin = di.getIniciofins().iterator();
                                        while (itin.hasNext()) {
                                            Iniciofin in = (Iniciofin) itin.next();
                                            SimpleDateFormat formateador = new SimpleDateFormat("HH:mm");
                                            String i = formateador.format(in.getInicio());
                                            String ii = formateador.format(in.getFin());
                                            Date inicio = formateador.parse(i);
                                            Date fin = formateador.parse(ii);
                                            if(diaini.getDate()<di.getDia()&&diafin.getDate()>di.getDia()){
                                                if(in.getEstadoInicio()!=null || in.getEstadoFin()!=null){
                                                    if(control==true){
                                                        JOptionPane.showMessageDialog(null, "El personal " + toString() + " tiene clases pero se suspenderán por la tarea extracurricular", "Registrar Tarea Extracurricular", JOptionPane.INFORMATION_MESSAGE);
                                                        band = 1;
                                                        //return band;
                                                    }
                                                    in.setEstadoInicio(null);
                                                    in.setEstadoFin(null);
                                                    in.actualizarIniciofin(in);
                                                }
                                            }else if(diaini.getDate()==di.getDia()){
                                                if(hini.compareTo(inicio)<=0){
                                                    if(in.getEstadoInicio()!=null || in.getEstadoFin()!=null){
                                                        if(control==true){
                                                            JOptionPane.showMessageDialog(null, "El personal " + toString() + " tiene clases pero se suspenderán por la tarea extracurricular", "Registrar Tarea Extracurricular", JOptionPane.INFORMATION_MESSAGE);
                                                            band = 1;
                                                            //return band;
                                                        }
                                                        in.setEstadoInicio(null);
                                                        in.setEstadoFin(null);
                                                        in.actualizarIniciofin(in);  
                                                    }
                                                }else if(hini.compareTo(inicio)>=0){
                                                    if(in.getEstadoFin()!=null){
                                                        if(control==true){
                                                            JOptionPane.showMessageDialog(null, "El personal " + toString() + " tiene clases pero se suspenderán por la tarea extracurricular", "Registrar Tarea Extracurricular", JOptionPane.INFORMATION_MESSAGE);
                                                            band = 2;
                                                            //return band;
                                                        }
                                                        in.setEstadoFin(null);
                                                        in.actualizarIniciofin(in);
                                                    }
                                                }
                                            }else if(diafin.getDate()==di.getDia()){
                                                if(hfin.compareTo(fin)>=0){
                                                    if(in.getEstadoInicio()!=null || in.getEstadoFin()!=null){
                                                        if(control==true){
                                                            JOptionPane.showMessageDialog(null, "El personal " + toString() + " tiene clases pero se suspenderán por la tarea extracurricular", "Registrar Tarea Extracurricular", JOptionPane.INFORMATION_MESSAGE);
                                                            band = 1;
                                                            //return band;
                                                        }
                                                        in.setEstadoInicio(null);
                                                        in.setEstadoFin(null);
                                                        in.actualizarIniciofin(in);
                                                    }
                                                }else if(hini.compareTo(fin)<=0){
                                                    if(in.getEstadoInicio()!=null || in.getEstadoFin()!=null){
                                                        if(control==true){
                                                            JOptionPane.showMessageDialog(null, "El personal " + toString() + " tiene clases pero se suspenderán por la tarea extracurricular", "Registrar Tarea Extracurricular", JOptionPane.INFORMATION_MESSAGE);
                                                            band = 1;
                                                            //return band;
                                                        }
                                                        in.setEstadoInicio(null);
                                                        in.setEstadoFin(null);
                                                        in.actualizarIniciofin(in);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    diaaux = Controlador.sumarFechasDias(diaaux, 1);
                                }
                            }
                        }else if(age.getTarea().getTareareunions().iterator().hasNext()){
                            Date diaaux=diaini;
                            while (diaaux.compareTo(diafin) <= 0) {
                                Dia di = age.getDia2(diaaux);
                                if (di.getIdDia() != null) {
                                    Iterator itin = di.getIniciofins().iterator();
                                    while (itin.hasNext()) {
                                        Iniciofin in = (Iniciofin) itin.next();
                                        SimpleDateFormat formateador = new SimpleDateFormat("HH:mm");
                                        String i = formateador.format(in.getInicio());
                                        String ii = formateador.format(in.getFin());
                                        Date inicio = formateador.parse(i);
                                        Date fin = formateador.parse(ii);
                                        if (diaini.getDate() < di.getDia() && diafin.getDate() > di.getDia()) {
                                            if (in.getEstadoInicio() != null || in.getEstadoFin() != null) {
                                                if (control == true) {
                                                    JOptionPane.showMessageDialog(null, "El personal " + toString() + " tiene reuniones pero se suspenderán por la tarea extracurricular", "Registrar Tarea Extracurricular", JOptionPane.INFORMATION_MESSAGE);
                                                    band = 1;
                                                    //return band;
                                                }
                                                in.setEstadoInicio(null);
                                                in.actualizarIniciofin(in);
                                            }
                                        } else if (diaini.getDate() == di.getDia()) {
                                            if (hini.compareTo(inicio) <= 0) {
                                                if (in.getEstadoInicio() != null || in.getEstadoFin() != null) {
                                                    if (control == true) {
                                                        JOptionPane.showMessageDialog(null, "El personal " + toString() + " tiene reuniones pero se suspenderán por la tarea extracurricular", "Registrar Tarea Extracurricular", JOptionPane.INFORMATION_MESSAGE);
                                                        band = 1;
                                                        //return band;   
                                                    }
                                                    in.setEstadoInicio(null);
                                                    in.setEstadoFin(null);
                                                    in.actualizarIniciofin(in);
                                                }
                                            } else if (hini.compareTo(inicio) >= 0) {
                                                if (in.getEstadoFin() != null) {
                                                    if (control == true) {
                                                        JOptionPane.showMessageDialog(null, "El personal " + toString() + " tiene reuniones pero se suspenderán por la tarea extracurricular", "Registrar Tarea Extracurricular", JOptionPane.INFORMATION_MESSAGE);
                                                        band = 2;
                                                        //return band;
                                                    }
                                                    in.setEstadoFin(null);
                                                    in.actualizarIniciofin(in);
                                                }
                                            }
                                        }
                                    }
                                }
                                diaaux = Controlador.sumarFechasDias(diaaux, 1);
                            }
                        }
                    }
                }
            }
            
//            if(!declaracionjuradas.isEmpty()){
//                Date diaux=diaini;
//                while(diaux.compareTo(diafin)<=0) {
//                    String di= ObtenerDia(diaux.getDay());
//                    Iterator itact=declaracionjuradas.iterator().next().ObtenerActivos(di).iterator();
//                    while(itact.hasNext()){
//                        Activo act=(Activo) itact.next();
//                        Iterator itin=act.getActivoIniciofins().iterator();
//                        while(itin.hasNext()){
//                            ActivoIniciofin in=(ActivoIniciofin) itin.next();
//                            if (hini.compareTo(in.getInicio()) <= 0 && hfin.compareTo(in.getInicio()) >= 0) {
//                                //band=0;
//                                if(control==true){JOptionPane.showMessageDialog(null,"", "Registrar Reunión", JOptionPane.ERROR_MESSAGE);}
//                                //return band;
//                            } else if (hini.compareTo(in.getFin()) <= 0 && hfin.compareTo(in.getFin()) >= 0) {
//                                //band=0;
//                                if(control==true){JOptionPane.showMessageDialog(null,"no existe disponibilidad por parte de la declaración jurada a ese horario", "Registrar Reunión", JOptionPane.ERROR_MESSAGE);}
//                                //return band;
//                            } else if (hini.compareTo(in.getInicio()) >= 0 && hfin.compareTo(in.getInicio()) >= 0 && hini.compareTo(in.getFin()) <= 0 && hfin.compareTo(in.getFin()) <= 0) {
//                                //band=0;
//                                if(control==true){JOptionPane.showMessageDialog(null,"no existe disponibilidad por parte de la declaración jurada a ese horario", "Registrar Reunión", JOptionPane.ERROR_MESSAGE);}
//                                //return band;
//                            }
////////                                if(hini.compareTo(in.getFin())<0 || hfin.compareTo(in.getInicio())>0){
////////                                    band=false;
////////                                    if(control==true){JOptionPane.showMessageDialog(null,"no existe disponibilidad por parte de la declaración jurada a ese horario", "Registrar Tarea Extracurricular", JOptionPane.ERROR_MESSAGE);}
////////                                    return band;
////////                                }
//                            
//                        }
//                    }
//                    diaux=Controlador.sumarFechasDias(diaux, 1);
//                }
//            }
        }catch(Exception ex){JOptionPane.showMessageDialog(null, ex.toString());}
        return band;
    }

    // </editor-fold>
    
    ///OTROS
    // <editor-fold defaultstate="collapsed" desc="OTROS"> 
    public boolean OtrosVerificarDisponibilidad (Date diaini,Date hini,Date hfin,Date diafin, boolean control){
        boolean band=true;
        try {
            if (!Controlador.PERSISTENCIA.getAgendas(idPersonal).isEmpty()) {
                Iterator it = Controlador.PERSISTENCIA.getAgendas(idPersonal).iterator();
                while (it.hasNext()) {
                    Agenda age = (Agenda) it.next();
                    if (age.getPersonal().getEstado() == true && age.getTarea().getEstado() == true) {
                        if(age.getTarea().getTareaotros().iterator().hasNext()){
                            Tareaotro tarot=age.getTarea().getTareaotros().iterator().next();
                            Date inicio=tarot.getDiaInicio();
                            Date fin=tarot.getDiaFin();
                            if(diaini.compareTo(inicio)>=0 ||diafin.compareTo(inicio)>= 0 && diaini.compareTo(fin)<=0 || diafin.compareTo(fin)<=0){
                                Date hinicio = tarot.getDiaInicio();
                                Date hhfin = tarot.getDiaFin();
                                if(hini.compareTo(hinicio)<=0&&hfin.compareTo(hinicio)>=0){
                                    band = false;
                                    JOptionPane.showMessageDialog(null, "No existe disponibilidad de horario para "+ toString() +" porque existe otra tarea a ese horario", "Registrar Tarea", JOptionPane.ERROR_MESSAGE);
                                    return band;
                                }else if(hini.compareTo(hhfin)<=0&&hfin.compareTo(hhfin)>=0){
                                    band = false;
                                    JOptionPane.showMessageDialog(null, "No existe disponibilidad de horario para "+ toString() +" porque existe otra tarea a ese horario", "Registrar Tarea", JOptionPane.ERROR_MESSAGE);
                                    return band;
                                }else if(hini.compareTo(hinicio)>=0&&hfin.compareTo(hinicio)>=0&&hini.compareTo(hhfin)<=0&&hfin.compareTo(hhfin)<=0){
                                    band = false;
                                    JOptionPane.showMessageDialog(null, "No existe disponibilidad de horario para "+ toString() +" porque existe otra tarea a ese horario", "Registrar Tarea", JOptionPane.ERROR_MESSAGE);
                                    return band;
                                }
                            }
                        }else if(age.getTarea().getTareaextracurriculars().iterator().hasNext()){
                            Tareaextracurricular tarot=age.getTarea().getTareaextracurriculars().iterator().next();
                            Date inicio=tarot.getDiaInicio();
                            Date fin=tarot.getDiaFin();
                            if(diaini.compareTo(inicio)>=0 ||diafin.compareTo(inicio)>= 0 && diaini.compareTo(fin)<=0 || diafin.compareTo(fin)<=0){
                                hini.setYear(diaini.getYear());
                                hini.setMonth(diaini.getMonth());
                                hini.setDate(diaini.getDate());
                                hfin.setYear(diafin.getYear());
                                hfin.setMonth(diafin.getMonth());
                                hfin.setDate(diafin.getDate());

                                if(hini.compareTo(inicio)<=0&&hfin.compareTo(inicio)>=0){
                                    band = false;
                                    JOptionPane.showMessageDialog(null, "No existe disponibilidad de horario para "+ toString() +" porque existe una tarea extracurricular a ese horario", "Registrar Tarea", JOptionPane.ERROR_MESSAGE);
                                    return band;
                                }else if(hini.compareTo(fin)<=0&&hfin.compareTo(fin)>=0){
                                    band = false;
                                    JOptionPane.showMessageDialog(null, "No existe disponibilidad de horario para "+ toString() +" porque existe una tarea extracurricular a ese horario", "Registrar Tarea", JOptionPane.ERROR_MESSAGE);
                                    return band;
                                }else if(hini.compareTo(inicio)>=0&&hfin.compareTo(fin)<=0){
                                    band = false;
                                    JOptionPane.showMessageDialog(null, "No existe disponibilidad de horario para "+ toString() +" porque existe una tarea extracurricular a ese horario", "Registrar Tarea", JOptionPane.ERROR_MESSAGE);
                                    return band;
                                }else if(hini.compareTo(inicio)<=0&&hfin.compareTo(fin)>=0){
                                    band = false;
                                    if(control==true){JOptionPane.showMessageDialog(null, "No existe disponibilidad de horario para "+ toString() +" porque existe una tarea extracurricular a ese horario", "Registrar Reunión", JOptionPane.ERROR_MESSAGE);}
                                    return band;
                                }
                            }
                        }else if(age.getTarea().getTareaclases().iterator().hasNext()){
                            if (diaini.getYear()==diafin.getYear()&&diaini.getMonth()==diafin.getMonth()&&diaini.getDate()==diafin.getDate()) {
                                Dia di = age.getDia2(diaini);
                                if (di.getIdDia() != null) {
                                    Iterator itin = di.getIniciofins().iterator();
                                    while (itin.hasNext()) {
                                        Iniciofin in = (Iniciofin) itin.next();
                                        SimpleDateFormat formateador = new SimpleDateFormat("HH:mm");
                                        String i=formateador.format(in.getInicio());
                                        String ii=formateador.format(in.getFin());
                                        Date inicio = formateador.parse(i);
                                        Date fin = formateador.parse(ii);
                                        if(hini.compareTo(inicio)<=0&&hfin.compareTo(inicio)>=0){
                                            if(control==true){JOptionPane.showMessageDialog(null, "No existe disponibilidad de horario para " + toString() + " porque existe una clase a ese horario", "Registrar Tarea", JOptionPane.ERROR_MESSAGE);}
                                            band = false;
                                            return band;
                                        }else if(hini.compareTo(fin)<=0&&hfin.compareTo(fin)>=0){
                                            if(control==true){JOptionPane.showMessageDialog(null, "No existe disponibilidad de horario para " + toString() + " porque existe una clase a ese horario", "Registrar Tarea", JOptionPane.ERROR_MESSAGE);}
                                            band = false;
                                            return band;
                                        }else if(hini.compareTo(inicio)>=0&&hfin.compareTo(inicio)>=0&&hini.compareTo(fin)<=0&&hfin.compareTo(fin)<=0){
                                            band = false;
                                            if(control==true){JOptionPane.showMessageDialog(null, "No existe disponibilidad de horario para " + toString() + " porque existe una clase a ese horario", "Registrar Tarea", JOptionPane.ERROR_MESSAGE);}
                                            return band;
                                        }else if(hini.compareTo(inicio)<=0&&hfin.compareTo(inicio)>=0&&hini.compareTo(fin)<=0&&hfin.compareTo(fin)>=0){
                                            band = false;
                                            if(control==true){JOptionPane.showMessageDialog(null, "No existe disponibilidad de horario para " + toString() + " porque existe una clase a ese horario", "Registrar Tarea", JOptionPane.ERROR_MESSAGE);}
                                            return band;
                                        }
                                    }
                                }
                            } else {
                                Date diaaux = diaini;
                                while (diaaux.compareTo(diafin) <= 0) {
                                    Dia di = age.getDia2(diaaux);
                                    if (di.getIdDia() != null) {
                                        Iterator itin = di.getIniciofins().iterator();
                                        while (itin.hasNext()) {
                                            Iniciofin in = (Iniciofin) itin.next();
                                            SimpleDateFormat formateador = new SimpleDateFormat("HH:mm");
                                            String i = formateador.format(in.getInicio());
                                            String ii = formateador.format(in.getFin());
                                            Date inicio = formateador.parse(i);
                                            Date fin = formateador.parse(ii);
                                            if(diaini.getDate()<di.getDia()&&diafin.getDate()>di.getDia()){
                                                if(control==true){JOptionPane.showMessageDialog(null, "No existe disponibilidad de horario para " + toString() + " porque existe una clase a ese horario", "Registrar Tarea", JOptionPane.ERROR_MESSAGE);}
                                                band = false;
                                                return band;
                                            }else if(diaini.getDate()==di.getDia()){
                                                if(hini.compareTo(inicio)<=0&&hfin.compareTo(inicio)>=0){
                                                    if(control==true){JOptionPane.showMessageDialog(null, "No existe disponibilidad de horario para " + toString() + " porque existe una clase a ese horario", "Registrar Tarea", JOptionPane.ERROR_MESSAGE);}
                                                    band = false;
                                                    return band;
                                                }else if(hini.compareTo(inicio)>=0&&hini.compareTo(fin)<=0){
                                                    if(control==true){JOptionPane.showMessageDialog(null, "No existe disponibilidad de horario para " + toString() + " porque existe una clase a ese horario", "Registrar Tarea", JOptionPane.ERROR_MESSAGE);}
                                                    band = false;
                                                    return band;
                                                }
                                            }else if(diafin.getDate()==di.getDia()){
                                                if(hfin.compareTo(fin)>=0){
                                                    if(control==true){JOptionPane.showMessageDialog(null, "No existe disponibilidad de horario para " + toString() + " porque existe una clase a ese horario", "Registrar Tarea", JOptionPane.ERROR_MESSAGE);}
                                                    band = false;
                                                    return band;
                                                }else if(hini.compareTo(inicio)>=0&&hfin.compareTo(fin)<=0){
                                                    if(control==true){JOptionPane.showMessageDialog(null, "No existe disponibilidad de horario para " + toString() + " porque existe una clase a ese horario", "Registrar Tarea", JOptionPane.ERROR_MESSAGE);}
                                                    band = false;
                                                    return band;
                                                }
                                            }
                                        }
                                    }
                                    diaaux = Controlador.sumarFechasDias(diaaux, 1);
                                }
                            }
                        }else if(age.getTarea().getTareareunions().iterator().hasNext()){
                            Date diaaux = diaini;
                            while (diaaux.compareTo(diafin) <= 0) {
                                Dia di = age.getDia2(diaaux);
                                if (di.getIdDia() != null) {
                                    Iterator itin = di.getIniciofins().iterator();
                                    while (itin.hasNext()) {
                                        Iniciofin in = (Iniciofin) itin.next();
                                        SimpleDateFormat formateador = new SimpleDateFormat("HH:mm");
                                        String i = formateador.format(in.getInicio());
                                        String ii = formateador.format(in.getFin());
                                        Date inicio = formateador.parse(i);
                                        Date fin = formateador.parse(ii);
                                        if (hini.compareTo(inicio) <= 0 && hfin.compareTo(inicio) >= 0) {
                                            band = false;
                                            JOptionPane.showMessageDialog(null, "No existe disponibilidad de horario para " + toString() + " porque existe una reunión a ese horario", "Registrar Tarea", JOptionPane.ERROR_MESSAGE);
                                            return band;
                                        } else if (hini.compareTo(fin) <= 0 && hfin.compareTo(fin) >= 0) {
                                            band = false;
                                            JOptionPane.showMessageDialog(null, "No existe disponibilidad de horario para " + toString() + " porque existe una reunión a ese horario", "Registrar Tarea", JOptionPane.ERROR_MESSAGE);
                                            return band;
                                        } else if (hini.compareTo(inicio) >= 0 && hfin.compareTo(inicio) >= 0 && hini.compareTo(fin) <= 0 && hfin.compareTo(fin) <= 0) {
                                            band = false;
                                            JOptionPane.showMessageDialog(null, "No existe disponibilidad de horario para " + toString() + " porque existe una reunión a ese horario", "Registrar Tarea", JOptionPane.ERROR_MESSAGE);
                                            return band;
                                        }
                                    }
                                }
                                diaaux = Controlador.sumarFechasDias(diaaux, 1);
                            }
                        }
                    }
                }
            }
            
            if(!declaracionjuradas.isEmpty()){
                Date diaux=diaini;
                while(diaux.compareTo(diafin)<=0) {
                    String di= ObtenerDia(diaux.getDay());
                    Iterator itact=declaracionjuradas.iterator().next().ObtenerActivos(di).iterator();
                    while(itact.hasNext()){
                        Activo act=(Activo) itact.next();
                        Iterator itin=act.getActivoIniciofins().iterator();
                        while(itin.hasNext()){
                            ActivoIniciofin in=(ActivoIniciofin) itin.next();
                            if (hini.compareTo(in.getInicio()) <= 0 && hfin.compareTo(in.getInicio()) >= 0) {
                                band=false;
                                if(control==true){JOptionPane.showMessageDialog(null,"no existe disponibilidad por parte de la declaración jurada a ese horario", "Registrar Reunión", JOptionPane.ERROR_MESSAGE);}
                                return band;
                            } else if (hini.compareTo(in.getFin()) <= 0 && hfin.compareTo(in.getFin()) >= 0) {
                                band=false;
                                if(control==true){JOptionPane.showMessageDialog(null,"no existe disponibilidad por parte de la declaración jurada a ese horario", "Registrar Reunión", JOptionPane.ERROR_MESSAGE);}
                                return band;
                            } else if (hini.compareTo(in.getInicio()) >= 0 && hfin.compareTo(in.getInicio()) >= 0 && hini.compareTo(in.getFin()) <= 0 && hfin.compareTo(in.getFin()) <= 0) {
                                band=false;
                                if(control==true){JOptionPane.showMessageDialog(null,"no existe disponibilidad por parte de la declaración jurada a ese horario", "Registrar Reunión", JOptionPane.ERROR_MESSAGE);}
                                return band;
                            }
//                                if(hini.compareTo(in.getFin())<0 || hfin.compareTo(in.getInicio())>0){
//                                    band=false;
//                                    JOptionPane.showMessageDialog(null,"no existe disponibilidad por parte de la declaración jurada a ese horario", "Registrar Tarea", JOptionPane.ERROR_MESSAGE);
//                                    return band;
//                                }
                            
                        }
                    }
                    diaux=Controlador.sumarFechasDias(diaux, 1);
                }
            }
        }catch(Exception ex){JOptionPane.showMessageDialog(null, ex.toString());}
        return band;
    }
    // </editor-fold>
    
    //CLASES
    // <editor-fold defaultstate="collapsed" desc="Clase"> 
    public boolean DisponibilidadClase(Date inici, Date finn, HashMap inic,HashMap dsem, int id){
        boolean a=true;
//        int d=0;
        Date ot1 = inici;
        if (dsem.containsValue("LUNES")) {
            while (ot1.getDay() != 1) {
                ot1 = Controlador.sumarFechasDias(ot1, 1);
            }
             Date otro = ot1;
             Iniciofin ini= (Iniciofin) inic.get(1);
            // <editor-fold defaultstate="collapsed" desc="Guarda meses y dias">
        while (otro.compareTo(finn) <= 0) {
            if (!Controlador.PERSISTENCIA.getAgendas(idPersonal).isEmpty()) {
                Iterator it = Controlador.PERSISTENCIA.getAgendas(idPersonal).iterator();
                while (it.hasNext()) {
                    Agenda age = (Agenda) it.next();
                    if (age.getPersonal().getEstado() == true && age.getTarea().getEstado() == true &&age.getTarea().getIdTarea()!=id) {
                        if (age.getTarea().getTareaclases().iterator().hasNext()) {
                            Dia di = age.getDia2(otro);
                            if (di.getIdDia() != null) {
                                Iterator itin = di.getIniciofins().iterator();
                                while (itin.hasNext()) {
                                    Iniciofin in = (Iniciofin) itin.next();
                                    if (ini.getInicio().compareTo(in.getInicio()) <= 0 && ini.getFin().compareTo(in.getInicio()) >= 0) {
                                        a=false;
                                        break;
                                    } else if (ini.getInicio().compareTo(in.getFin()) <= 0 && ini.getFin().compareTo(in.getFin()) >= 0) {
                                        a=false;
                                        break;
                                    } else if (ini.getInicio().compareTo(in.getInicio()) >= 0 && ini.getFin().compareTo(in.getInicio()) >= 0 && ini.getInicio().compareTo(in.getFin()) <= 0 && ini.getFin().compareTo(in.getFin()) <= 0) {
                                        a=false;
                                        break;
                                    }
                                }
                            }
                        } 
                    }
                }
            }
            if (!declaracionjuradas.isEmpty()) {
                Iterator itact = declaracionjuradas.iterator().next().ObtenerActivos("LUNES").iterator();
                while (itact.hasNext()) {
                    Activo act = (Activo) itact.next();
                    Iterator itin = act.getActivoIniciofins().iterator();
                    while (itin.hasNext()) {
                        ActivoIniciofin in = (ActivoIniciofin) itin.next();
                        if (ini.getInicio().compareTo(in.getInicio()) <= 0 && ini.getFin().compareTo(in.getInicio()) >= 0) {
                            a=false;
                            break;
                        } else if (ini.getInicio().compareTo(in.getFin()) <= 0 && ini.getFin().compareTo(in.getFin()) >= 0) {
                            a=false;
                            break;
                        } else if (ini.getInicio().compareTo(in.getInicio()) >= 0 && ini.getFin().compareTo(in.getInicio()) >= 0 && ini.getInicio().compareTo(in.getFin()) <= 0 && ini.getFin().compareTo(in.getFin()) <= 0) {
                            a=false;
                            break;
                        }
                    }
                }
            }
            otro = Controlador.sumarFechasDias(otro, 7);
        }
        // </editor-fold>
        
        }
        Date ot2 = inici;
        if (dsem.containsValue("MARTES")) {
            while (ot2.getDay() != 2) {
                ot2 = Controlador.sumarFechasDias(ot2, 1);
            }
             Date otro = ot2;
             Iniciofin ini=  (Iniciofin) inic.get(2);
            // <editor-fold defaultstate="collapsed" desc="Guardar meses y dias">
        while (otro.compareTo(finn) <= 0) {
            if (!Controlador.PERSISTENCIA.getAgendas(idPersonal).isEmpty()) {
                Iterator it = Controlador.PERSISTENCIA.getAgendas(idPersonal).iterator();
                while (it.hasNext()) {
                    Agenda age = (Agenda) it.next();
                    if (age.getPersonal().getEstado() == true && age.getTarea().getEstado() == true &&age.getTarea().getIdTarea()!=id) {
                        if (age.getTarea().getTareaclases().iterator().hasNext()) {
                            Dia di = age.getDia2(otro);
                            if (di.getIdDia() != null) {
                                Iterator itin = di.getIniciofins().iterator();
                                while (itin.hasNext()) {
                                    Iniciofin in = (Iniciofin) itin.next();
                                    if (ini.getInicio().compareTo(in.getInicio()) <= 0 && ini.getFin().compareTo(in.getInicio()) >= 0) {
                                        a=false;
                                        break;
                                    } else if (ini.getInicio().compareTo(in.getFin()) <= 0 && ini.getFin().compareTo(in.getFin()) >= 0) {
                                        a=false;
                                        break;
                                    } else if (ini.getInicio().compareTo(in.getInicio()) >= 0 && ini.getFin().compareTo(in.getInicio()) >= 0 && ini.getInicio().compareTo(in.getFin()) <= 0 && ini.getFin().compareTo(in.getFin()) <= 0) {
                                        a=false;
                                        break;
                                    }
                                }
                            }
                        } 
                    }
                }
            }
            if (!declaracionjuradas.isEmpty()) {
                Iterator itact = declaracionjuradas.iterator().next().ObtenerActivos("LUNES").iterator();
                while (itact.hasNext()) {
                    Activo act = (Activo) itact.next();
                    Iterator itin = act.getActivoIniciofins().iterator();
                    while (itin.hasNext()) {
                        ActivoIniciofin in = (ActivoIniciofin) itin.next();
                        if (ini.getInicio().compareTo(in.getInicio()) <= 0 && ini.getFin().compareTo(in.getInicio()) >= 0) {
                            a=false;
                            break;
                        } else if (ini.getInicio().compareTo(in.getFin()) <= 0 && ini.getFin().compareTo(in.getFin()) >= 0) {
                            a=false;
                            break;
                        } else if (ini.getInicio().compareTo(in.getInicio()) >= 0 && ini.getFin().compareTo(in.getInicio()) >= 0 && ini.getInicio().compareTo(in.getFin()) <= 0 && ini.getFin().compareTo(in.getFin()) <= 0) {
                            a=false;
                            break;
                        }
                    }
                }
            }
            otro = Controlador.sumarFechasDias(otro, 7);
        }
        // </editor-fold>
        }
        Date ot3 = inici;
        if (dsem.containsValue("MIERCOLES")) {
            while (ot3.getDay() != 3) {
                ot3 = Controlador.sumarFechasDias(ot3, 1);
            }
             Date otro = ot3;
             Iniciofin ini= (Iniciofin) inic.get(3);
            // <editor-fold defaultstate="collapsed" desc="Guarda meses y dias">
        while (otro.compareTo(finn) <= 0) {
            if (!Controlador.PERSISTENCIA.getAgendas(idPersonal).isEmpty()) {
                Iterator it = Controlador.PERSISTENCIA.getAgendas(idPersonal).iterator();
                while (it.hasNext()) {
                    Agenda age = (Agenda) it.next();
                    if (age.getPersonal().getEstado() == true && age.getTarea().getEstado() == true && age.getTarea().getIdTarea()!=id) {
                        if (age.getTarea().getTareaclases().iterator().hasNext()) {
                            Dia di = age.getDia2(otro);
                            if (di.getIdDia() != null) {
                                Iterator itin = di.getIniciofins().iterator();
                                while (itin.hasNext()) {
                                    Iniciofin in = (Iniciofin) itin.next();
                                    if (ini.getInicio().compareTo(in.getInicio()) <= 0 && ini.getFin().compareTo(in.getInicio()) >= 0) {
                                        a=false;
                                        break;
                                    } else if (ini.getInicio().compareTo(in.getFin()) <= 0 && ini.getFin().compareTo(in.getFin()) >= 0) {
                                        a=false;
                                        break;
                                    } else if (ini.getInicio().compareTo(in.getInicio()) >= 0 && ini.getFin().compareTo(in.getInicio()) >= 0 && ini.getInicio().compareTo(in.getFin()) <= 0 && ini.getFin().compareTo(in.getFin()) <= 0) {
                                        a=false;
                                        break;
                                    }
                                }
                            }
                        } 
                    }
                }
            }
            if (!declaracionjuradas.isEmpty()) {
                Iterator itact = declaracionjuradas.iterator().next().ObtenerActivos("LUNES").iterator();
                while (itact.hasNext()) {
                    Activo act = (Activo) itact.next();
                    Iterator itin = act.getActivoIniciofins().iterator();
                    while (itin.hasNext()) {
                        ActivoIniciofin in = (ActivoIniciofin) itin.next();
                        if (ini.getInicio().compareTo(in.getInicio()) <= 0 && ini.getFin().compareTo(in.getInicio()) >= 0) {
                            a=false;
                            break;
                        } else if (ini.getInicio().compareTo(in.getFin()) <= 0 && ini.getFin().compareTo(in.getFin()) >= 0) {
                            a=false;
                            break;
                        } else if (ini.getInicio().compareTo(in.getInicio()) >= 0 && ini.getFin().compareTo(in.getInicio()) >= 0 && ini.getInicio().compareTo(in.getFin()) <= 0 && ini.getFin().compareTo(in.getFin()) <= 0) {
                            a=false;
                            break;
                        }
                    }
                }
            }
            otro = Controlador.sumarFechasDias(otro, 7);
        }
        // </editor-fold>
        
        }
        Date ot4 = inici;
        if (dsem.containsValue("JUEVES")) {
            while (ot4.getDay() != 4) {
                ot4= Controlador.sumarFechasDias(ot4, 1);
            }
             Date otro = ot4;
             Iniciofin ini= (Iniciofin) inic.get(4);
            // <editor-fold defaultstate="collapsed" desc="Guarda meses y dias">
        while (otro.compareTo(finn) <= 0) {
            if (!Controlador.PERSISTENCIA.getAgendas(idPersonal).isEmpty()) {
                Iterator it = Controlador.PERSISTENCIA.getAgendas(idPersonal).iterator();
                while (it.hasNext()) {
                    Agenda age = (Agenda) it.next();
                    if (age.getPersonal().getEstado() == true && age.getTarea().getEstado() == true && age.getTarea().getIdTarea()!=id) {
                        if (age.getTarea().getTareaclases().iterator().hasNext()) {
                            Dia di = age.getDia2(otro);
                            if (di.getIdDia() != null) {
                                Iterator itin = di.getIniciofins().iterator();
                                while (itin.hasNext()) {
                                    Iniciofin in = (Iniciofin) itin.next();
                                    if (ini.getInicio().compareTo(in.getInicio()) <= 0 && ini.getFin().compareTo(in.getInicio()) >= 0) {
                                        a=false;
                                        break;
                                    } else if (ini.getInicio().compareTo(in.getFin()) <= 0 && ini.getFin().compareTo(in.getFin()) >= 0) {
                                        a=false;
                                        break;
                                    } else if (ini.getInicio().compareTo(in.getInicio()) >= 0 && ini.getFin().compareTo(in.getInicio()) >= 0 && ini.getInicio().compareTo(in.getFin()) <= 0 && ini.getFin().compareTo(in.getFin()) <= 0) {
                                        a=false;
                                        break;
                                    }
                                }
                            }
                        } 
                    }
                }
            }
            if (!declaracionjuradas.isEmpty()) {
                Iterator itact = declaracionjuradas.iterator().next().ObtenerActivos("LUNES").iterator();
                while (itact.hasNext()) {
                    Activo act = (Activo) itact.next();
                    Iterator itin = act.getActivoIniciofins().iterator();
                    while (itin.hasNext()) {
                        ActivoIniciofin in = (ActivoIniciofin) itin.next();
                        if (ini.getInicio().compareTo(in.getInicio()) <= 0 && ini.getFin().compareTo(in.getInicio()) >= 0) {
                            a=false;
                            break;
                        } else if (ini.getInicio().compareTo(in.getFin()) <= 0 && ini.getFin().compareTo(in.getFin()) >= 0) {
                            a=false;
                            break;
                        } else if (ini.getInicio().compareTo(in.getInicio()) >= 0 && ini.getFin().compareTo(in.getInicio()) >= 0 && ini.getInicio().compareTo(in.getFin()) <= 0 && ini.getFin().compareTo(in.getFin()) <= 0) {
                            a=false;
                            break;
                        }
                    }
                }
            }
            otro = Controlador.sumarFechasDias(otro, 7);
        }
        // </editor-fold>
        
        }
        Date ot5 = inici;
        if (dsem.containsValue("VIERNES")) {
            while (ot5.getDay() != 5) {
                ot5 = Controlador.sumarFechasDias(ot5, 1);
            }
             Date otro = ot5;
             Iniciofin ini= (Iniciofin) inic.get(5);
             // <editor-fold defaultstate="collapsed" desc="Guarda meses y dias">
        while (otro.compareTo(finn) <= 0) {
            if (!Controlador.PERSISTENCIA.getAgendas(idPersonal).isEmpty()) {
                Iterator it = Controlador.PERSISTENCIA.getAgendas(idPersonal).iterator();
                while (it.hasNext()) {
                    Agenda age = (Agenda) it.next();
                    if (age.getPersonal().getEstado() == true && age.getTarea().getEstado() == true && age.getTarea().getIdTarea()!=id) {
                        if (age.getTarea().getTareaclases().iterator().hasNext()) {
                            Dia di = age.getDia2(otro);
                            if (di.getIdDia() != null) {
                                Iterator itin = di.getIniciofins().iterator();
                                while (itin.hasNext()) {
                                    Iniciofin in = (Iniciofin) itin.next();
                                    if (ini.getInicio().compareTo(in.getInicio()) <= 0 && ini.getFin().compareTo(in.getInicio()) >= 0) {
                                        a=false;
                                        break;
                                    } else if (ini.getInicio().compareTo(in.getFin()) <= 0 && ini.getFin().compareTo(in.getFin()) >= 0) {
                                        a=false;
                                        break;
                                    } else if (ini.getInicio().compareTo(in.getInicio()) >= 0 && ini.getFin().compareTo(in.getInicio()) >= 0 && ini.getInicio().compareTo(in.getFin()) <= 0 && ini.getFin().compareTo(in.getFin()) <= 0) {
                                        a=false;
                                        break;
                                    }
                                }
                            }
                        } 
                    }
                }
            }
            if (!declaracionjuradas.isEmpty()) {
                Iterator itact = declaracionjuradas.iterator().next().ObtenerActivos("LUNES").iterator();
                while (itact.hasNext()) {
                    Activo act = (Activo) itact.next();
                    Iterator itin = act.getActivoIniciofins().iterator();
                    while (itin.hasNext()) {
                        ActivoIniciofin in = (ActivoIniciofin) itin.next();
                        if (ini.getInicio().compareTo(in.getInicio()) <= 0 && ini.getFin().compareTo(in.getInicio()) >= 0) {
                            a=false;
                            break;
                        } else if (ini.getInicio().compareTo(in.getFin()) <= 0 && ini.getFin().compareTo(in.getFin()) >= 0) {
                            a=false;
                            break;
                        } else if (ini.getInicio().compareTo(in.getInicio()) >= 0 && ini.getFin().compareTo(in.getInicio()) >= 0 && ini.getInicio().compareTo(in.getFin()) <= 0 && ini.getFin().compareTo(in.getFin()) <= 0) {
                            a=false;
                            break;
                        }
                    }
                }
            }
            otro = Controlador.sumarFechasDias(otro, 7);
        }
        // </editor-fold>
        
        }
        Date ot6 = inici;
        if (dsem.containsValue("SABADO")) {
            while (ot6.getDay() != 6) {
                ot6 = Controlador.sumarFechasDias(ot6, 1);
            }
             Date otro = ot6;
             Iniciofin ini= (Iniciofin) inic.get(6);
             // <editor-fold defaultstate="collapsed" desc="Guarda meses y dias">
        while (otro.compareTo(finn) <= 0) {
            if (!Controlador.PERSISTENCIA.getAgendas(idPersonal).isEmpty()) {
                Iterator it = Controlador.PERSISTENCIA.getAgendas(idPersonal).iterator();
                while (it.hasNext()) {
                    Agenda age = (Agenda) it.next();
                    if (age.getPersonal().getEstado() == true && age.getTarea().getEstado() == true && age.getTarea().getIdTarea()!=id) {
                        if (age.getTarea().getTareaclases().iterator().hasNext()) {
                            Dia di = age.getDia2(otro);
                            if (di.getIdDia() != null) {
                                Iterator itin = di.getIniciofins().iterator();
                                while (itin.hasNext()) {
                                    Iniciofin in = (Iniciofin) itin.next();
                                    if (ini.getInicio().compareTo(in.getInicio()) <= 0 && ini.getFin().compareTo(in.getInicio()) >= 0) {
                                        a=false;
                                        break;
                                    } else if (ini.getInicio().compareTo(in.getFin()) <= 0 && ini.getFin().compareTo(in.getFin()) >= 0) {
                                        a=false;
                                        break;
                                    } else if (ini.getInicio().compareTo(in.getInicio()) >= 0 && ini.getFin().compareTo(in.getInicio()) >= 0 && ini.getInicio().compareTo(in.getFin()) <= 0 && ini.getFin().compareTo(in.getFin()) <= 0) {
                                        a=false;
                                        break;
                                    }
                                }
                            }
                        } 
                    }
                }
            }
            if (!declaracionjuradas.isEmpty()) {
                Iterator itact = declaracionjuradas.iterator().next().ObtenerActivos("LUNES").iterator();
                while (itact.hasNext()) {
                    Activo act = (Activo) itact.next();
                    Iterator itin = act.getActivoIniciofins().iterator();
                    while (itin.hasNext()) {
                        ActivoIniciofin in = (ActivoIniciofin) itin.next();
                        if (ini.getInicio().compareTo(in.getInicio()) <= 0 && ini.getFin().compareTo(in.getInicio()) >= 0) {
                            a=false;
                            break;
                        } else if (ini.getInicio().compareTo(in.getFin()) <= 0 && ini.getFin().compareTo(in.getFin()) >= 0) {
                            a=false;
                            break;
                        } else if (ini.getInicio().compareTo(in.getInicio()) >= 0 && ini.getFin().compareTo(in.getInicio()) >= 0 && ini.getInicio().compareTo(in.getFin()) <= 0 && ini.getFin().compareTo(in.getFin()) <= 0) {
                            a=false;
                            break;
                        }
                    }
                }
            }
            otro = Controlador.sumarFechasDias(otro, 7);
        }
        // </editor-fold>
        
        }

        return a;
    }
    //     </editor-fold>
////    public int[][] VerificarDisponibilidadClase(Date inici, Date finn, Iniciofin ini,List dsem){
////        int a=0;
////        int d=0;
////        Date ot1 = inici;
////        if (dsem.contains("LUNES")) {
////            while (ot1.getDay() != 1) {
////                ot1 = Controlador.sumarFechasDias(ot1, 1);
////            }
////             Date otro = ot1;
////            // <editor-fold defaultstate="collapsed" desc="Guarda meses y dias">
////        while (otro.compareTo(finn) <= 0) {
////            if (!Controlador.PERSISTENCIA.getAgendas(idPersonal).isEmpty()) {
////                Iterator it = Controlador.PERSISTENCIA.getAgendas(idPersonal).iterator();
////                while (it.hasNext()) {
////                    Agenda age = (Agenda) it.next();
////                    if (age.getPersonal().getEstado() == true && age.getTarea().getEstado() == true) {
////                        if (age.getTarea().getTareaotros().iterator().hasNext()) {
////                            Tareaotro tarot = age.getTarea().getTareaotros().iterator().next();
////                            Date inicio = tarot.getDiaInicio();
////                            Date fin = tarot.getDiaFin();
////                            if (otro.compareTo(inicio) >= 0 && otro.compareTo(fin) <= 0) {
////                                a++;
////                            }
////                        } else if (age.getTarea().getTareaextracurriculars().iterator().hasNext()) {
////                            Tareaextracurricular tarot = age.getTarea().getTareaextracurriculars().iterator().next();
////                            Date inicio = tarot.getDiaInicio();
////                            Date fin = tarot.getDiaFin();
////                            if (otro.compareTo(inicio) >= 0 && otro.compareTo(fin) <= 0) {
////                                a++;
////                            }
////                        } else if (age.getTarea().getTareaclases().iterator().hasNext()) {
////                            Dia di = age.getDia2(otro);
////                            if (di.getIdDia() != null) {
////                                Iterator itin = di.getIniciofins().iterator();
////                                while (itin.hasNext()) {
////                                    Iniciofin in = (Iniciofin) itin.next();
////                                    if (ini.getInicio().compareTo(in.getInicio()) <= 0 && ini.getFin().compareTo(in.getInicio()) >= 0) {
////                                        a++;
////                                    } else if (ini.getInicio().compareTo(in.getFin()) <= 0 && ini.getFin().compareTo(in.getFin()) >= 0) {
////                                        a++;
////                                    } else if (ini.getInicio().compareTo(in.getInicio()) >= 0 && ini.getFin().compareTo(in.getInicio()) >= 0 && ini.getInicio().compareTo(in.getFin()) <= 0 && ini.getFin().compareTo(in.getFin()) <= 0) {
////                                        a++;
////                                    }
////                                }
////                            }
////                        } else if (age.getTarea().getTareareunions().iterator().hasNext()) {
////                            Dia di = age.getDia2(otro);
////                            if (di.getIdDia() != null) {
////                                Iterator itin = di.getIniciofins().iterator();
////                                while (itin.hasNext()) {
////                                    Iniciofin in = (Iniciofin) itin.next();
////                                    if (ini.getInicio().compareTo(in.getInicio()) <= 0 && ini.getFin().compareTo(in.getInicio()) >= 0) {
////                                        a++;
////                                    } else if (ini.getInicio().compareTo(in.getFin()) <= 0 && ini.getFin().compareTo(in.getFin()) >= 0) {
////                                        a++;
////                                    } else if (ini.getInicio().compareTo(in.getInicio()) >= 0 && ini.getFin().compareTo(in.getInicio()) >= 0 && ini.getInicio().compareTo(in.getFin()) <= 0 && ini.getFin().compareTo(in.getFin()) <= 0) {
////                                        a++;
////                                    }
////                                }
////                            }
////                        }
////                    }
////                }
////            }
////            if (!declaracionjuradas.isEmpty()) {
////                Iterator itact = declaracionjuradas.iterator().next().ObtenerActivos("LUNES").iterator();
////                while (itact.hasNext()) {
////                    Activo act = (Activo) itact.next();
////                    Iterator itin = act.getActivoIniciofins().iterator();
////                    while (itin.hasNext()) {
////                        ActivoIniciofin in = (ActivoIniciofin) itin.next();
////                        if (ini.getInicio().compareTo(in.getInicio()) <= 0 && ini.getFin().compareTo(in.getInicio()) >= 0) {
////                            d++;
////                        } else if (ini.getInicio().compareTo(in.getFin()) <= 0 && ini.getFin().compareTo(in.getFin()) >= 0) {
////                            d++;
////                        } else if (ini.getInicio().compareTo(in.getInicio()) >= 0 && ini.getFin().compareTo(in.getInicio()) >= 0 && ini.getInicio().compareTo(in.getFin()) <= 0 && ini.getFin().compareTo(in.getFin()) <= 0) {
////                            d++;
////                        }
//////                        if (in.getInicio().compareTo(ini.getInicio()) > 0 && in.getInicio().compareTo(ini.getFin()) < 0 || in.getFin().compareTo(ini.getInicio()) > 0 && in.getFin().compareTo(ini.getFin()) < 0) {
//////                            d++;
//////                        }
////                    }
////                }
////            }
////            otro = Controlador.sumarFechasDias(otro, 7);
////        }
////        // </editor-fold>
////        }
////        Date ot2 = inici;
////        if (dsem.contains("MARTES")) {
////            while (ot2.getDay() != 2) {
////                ot2 = Controlador.sumarFechasDias(ot2, 1);
////            }
////             Date otro = ot2;
////            // <editor-fold defaultstate="collapsed" desc="Guardar meses y dias">
////        while (otro.compareTo(finn) <= 0) {
////            if (!Controlador.PERSISTENCIA.getAgendas(idPersonal).isEmpty()) {
////                Iterator it = Controlador.PERSISTENCIA.getAgendas(idPersonal).iterator();
////                while (it.hasNext()) {
////                    Agenda age = (Agenda) it.next();
////                    if (age.getPersonal().getEstado() == true && age.getTarea().getEstado() == true) {
////                        if (age.getTarea().getTareaotros().iterator().hasNext()) {
////                            Tareaotro tarot = age.getTarea().getTareaotros().iterator().next();
////                            Date inicio = tarot.getDiaInicio();
////                            Date fin = tarot.getDiaFin();
////                            if (otro.compareTo(inicio) >= 0 && otro.compareTo(fin) <= 0) {
////                                a++;
////                            }
////                        } else if (age.getTarea().getTareaextracurriculars().iterator().hasNext()) {
////                            Tareaextracurricular tarot = age.getTarea().getTareaextracurriculars().iterator().next();
////                            Date inicio = tarot.getDiaInicio();
////                            Date fin = tarot.getDiaFin();
////                            if (otro.compareTo(inicio) >= 0 && otro.compareTo(fin) <= 0) {
////                                a++;
////                            }
////                        } else if (age.getTarea().getTareaclases().iterator().hasNext()) {
////                            Dia di = age.getDia2(otro);
////                            if (di.getIdDia() != null) {
////                                Iterator itin = di.getIniciofins().iterator();
////                                while (itin.hasNext()) {
////                                    Iniciofin in = (Iniciofin) itin.next();
////                                    if (ini.getInicio().compareTo(in.getInicio()) <= 0 && ini.getFin().compareTo(in.getInicio()) >= 0) {
////                                        a++;
////                                    } else if (ini.getInicio().compareTo(in.getFin()) <= 0 && ini.getFin().compareTo(in.getFin()) >= 0) {
////                                        a++;
////                                    } else if (ini.getInicio().compareTo(in.getInicio()) >= 0 && ini.getFin().compareTo(in.getInicio()) >= 0 && ini.getInicio().compareTo(in.getFin()) <= 0 && ini.getFin().compareTo(in.getFin()) <= 0) {
////                                        a++;
////                                    }
////                                }
////                            }
////                        } else if (age.getTarea().getTareareunions().iterator().hasNext()) {
////                            Dia di = age.getDia2(otro);
////                            if (di.getIdDia() != null) {
////                                Iterator itin = di.getIniciofins().iterator();
////                                while (itin.hasNext()) {
////                                    Iniciofin in = (Iniciofin) itin.next();
////                                    if (ini.getInicio().compareTo(in.getInicio()) <= 0 && ini.getFin().compareTo(in.getInicio()) >= 0) {
////                                        a++;
////                                    } else if (ini.getInicio().compareTo(in.getFin()) <= 0 && ini.getFin().compareTo(in.getFin()) >= 0) {
////                                        a++;
////                                    } else if (ini.getInicio().compareTo(in.getInicio()) >= 0 && ini.getFin().compareTo(in.getInicio()) >= 0 && ini.getInicio().compareTo(in.getFin()) <= 0 && ini.getFin().compareTo(in.getFin()) <= 0) {
////                                        a++;
////                                    }
////                                }
////                            }
////                        }
////                    }
////                }
////            }
////            if (!declaracionjuradas.isEmpty()) {
////                Iterator itact = declaracionjuradas.iterator().next().ObtenerActivos("MARTES").iterator();
////                while (itact.hasNext()) {
////                    Activo act = (Activo) itact.next();
////                    Iterator itin = act.getActivoIniciofins().iterator();
////                    while (itin.hasNext()) {
////                        ActivoIniciofin in = (ActivoIniciofin) itin.next();
////                        if (ini.getInicio().compareTo(in.getInicio()) <= 0 && ini.getFin().compareTo(in.getInicio()) >= 0) {
////                            d++;
////                        } else if (ini.getInicio().compareTo(in.getFin()) <= 0 && ini.getFin().compareTo(in.getFin()) >= 0) {
////                            d++;
////                        } else if (ini.getInicio().compareTo(in.getInicio()) >= 0 && ini.getFin().compareTo(in.getInicio()) >= 0 && ini.getInicio().compareTo(in.getFin()) <= 0 && ini.getFin().compareTo(in.getFin()) <= 0) {
////                            d++;
////                        }
//////                        if (in.getInicio().compareTo(ini.getInicio()) > 0 && in.getInicio().compareTo(ini.getFin()) < 0 || in.getFin().compareTo(ini.getInicio()) > 0 && in.getFin().compareTo(ini.getFin()) < 0) {
//////                            d++;
//////                        }
////                    }
////                }
////            }
////            otro = Controlador.sumarFechasDias(otro, 7);
////        }
////        // </editor-fold>
////        }
////        Date ot3 = inici;
////        if (dsem.contains("MIERCOLES")) {
////            while (ot3.getDay() != 3) {
////                ot3 = Controlador.sumarFechasDias(ot3, 1);
////            }
////             Date otro = ot3;
////            // <editor-fold defaultstate="collapsed" desc="Guardar meses y dias">
////        while (otro.compareTo(finn) <= 0) {
////            if (!Controlador.PERSISTENCIA.getAgendas(idPersonal).isEmpty()) {
////                Iterator it = Controlador.PERSISTENCIA.getAgendas(idPersonal).iterator();
////                while (it.hasNext()) {
////                    Agenda age = (Agenda) it.next();
////                    if (age.getPersonal().getEstado() == true && age.getTarea().getEstado() == true) {
////                        if (age.getTarea().getTareaotros().iterator().hasNext()) {
////                            Tareaotro tarot = age.getTarea().getTareaotros().iterator().next();
////                            Date inicio = tarot.getDiaInicio();
////                            Date fin = tarot.getDiaFin();
////                            if (otro.compareTo(inicio) >= 0 && otro.compareTo(fin) <= 0) {
////                                a++;
////                            }
////                        } else if (age.getTarea().getTareaextracurriculars().iterator().hasNext()) {
////                            Tareaextracurricular tarot = age.getTarea().getTareaextracurriculars().iterator().next();
////                            Date inicio = tarot.getDiaInicio();
////                            Date fin = tarot.getDiaFin();
////                            if (otro.compareTo(inicio) >= 0 && otro.compareTo(fin) <= 0) {
////                                a++;
////                            }
////                        } else if (age.getTarea().getTareaclases().iterator().hasNext()) {
////                            Dia di = age.getDia2(otro);
////                            if (di.getIdDia() != null) {
////                                Iterator itin = di.getIniciofins().iterator();
////                                while (itin.hasNext()) {
////                                    Iniciofin in = (Iniciofin) itin.next();
////                                    if (ini.getInicio().compareTo(in.getInicio()) <= 0 && ini.getFin().compareTo(in.getInicio()) >= 0) {
////                                        a++;
////                                    } else if (ini.getInicio().compareTo(in.getFin()) <= 0 && ini.getFin().compareTo(in.getFin()) >= 0) {
////                                        a++;
////                                    } else if (ini.getInicio().compareTo(in.getInicio()) >= 0 && ini.getFin().compareTo(in.getInicio()) >= 0 && ini.getInicio().compareTo(in.getFin()) <= 0 && ini.getFin().compareTo(in.getFin()) <= 0) {
////                                        a++;
////                                    }
////                                }
////                            }
////                        } else if (age.getTarea().getTareareunions().iterator().hasNext()) {
////                            Dia di = age.getDia2(otro);
////                            if (di.getIdDia() != null) {
////                                Iterator itin = di.getIniciofins().iterator();
////                                while (itin.hasNext()) {
////                                    Iniciofin in = (Iniciofin) itin.next();
////                                    if (ini.getInicio().compareTo(in.getInicio()) <= 0 && ini.getFin().compareTo(in.getInicio()) >= 0) {
////                                        a++;
////                                    } else if (ini.getInicio().compareTo(in.getFin()) <= 0 && ini.getFin().compareTo(in.getFin()) >= 0) {
////                                        a++;
////                                    } else if (ini.getInicio().compareTo(in.getInicio()) >= 0 && ini.getFin().compareTo(in.getInicio()) >= 0 && ini.getInicio().compareTo(in.getFin()) <= 0 && ini.getFin().compareTo(in.getFin()) <= 0) {
////                                        a++;
////                                    }
////                                }
////                            }
////                        }
////                    }
////                }
////            }
////            if (!declaracionjuradas.isEmpty()) {
////                Iterator itact = declaracionjuradas.iterator().next().ObtenerActivos("MIERCOLES").iterator();
////                while (itact.hasNext()) {
////                    Activo act = (Activo) itact.next();
////                    Iterator itin = act.getActivoIniciofins().iterator();
////                    while (itin.hasNext()) {
////                        ActivoIniciofin in = (ActivoIniciofin) itin.next();
////                        if (ini.getInicio().compareTo(in.getInicio()) <= 0 && ini.getFin().compareTo(in.getInicio()) >= 0) {
////                            d++;
////                        } else if (ini.getInicio().compareTo(in.getFin()) <= 0 && ini.getFin().compareTo(in.getFin()) >= 0) {
////                            d++;
////                        } else if (ini.getInicio().compareTo(in.getInicio()) >= 0 && ini.getFin().compareTo(in.getInicio()) >= 0 && ini.getInicio().compareTo(in.getFin()) <= 0 && ini.getFin().compareTo(in.getFin()) <= 0) {
////                            d++;
////                        }
//////                        if (in.getInicio().compareTo(ini.getInicio()) > 0 && in.getInicio().compareTo(ini.getFin()) < 0 || in.getFin().compareTo(ini.getInicio()) > 0 && in.getFin().compareTo(ini.getFin()) < 0) {
//////                            d++;
//////                        }
////                    }
////                }
////            }
////            otro = Controlador.sumarFechasDias(otro, 7);
////        }
////        // </editor-fold>
////        }
////        Date ot4 = inici;
////        if (dsem.contains("JUEVES")) {
////            while (ot4.getDay() != 4) {
////                ot4= Controlador.sumarFechasDias(ot4, 1);
////            }
////             Date otro = ot4;
////            // <editor-fold defaultstate="collapsed" desc="Guardar meses y dias">
////        while (otro.compareTo(finn) <= 0) {
////            if (!Controlador.PERSISTENCIA.getAgendas(idPersonal).isEmpty()) {
////                Iterator it = Controlador.PERSISTENCIA.getAgendas(idPersonal).iterator();
////                while (it.hasNext()) {
////                    Agenda age = (Agenda) it.next();
////                    if (age.getPersonal().getEstado() == true && age.getTarea().getEstado() == true) {
////                        if (age.getTarea().getTareaotros().iterator().hasNext()) {
////                            Tareaotro tarot = age.getTarea().getTareaotros().iterator().next();
////                            Date inicio = tarot.getDiaInicio();
////                            Date fin = tarot.getDiaFin();
////                            if (otro.compareTo(inicio) >= 0 && otro.compareTo(fin) <= 0) {
////                                a++;
////                            }
////                        } else if (age.getTarea().getTareaextracurriculars().iterator().hasNext()) {
////                            Tareaextracurricular tarot = age.getTarea().getTareaextracurriculars().iterator().next();
////                            Date inicio = tarot.getDiaInicio();
////                            Date fin = tarot.getDiaFin();
////                            if (otro.compareTo(inicio) >= 0 && otro.compareTo(fin) <= 0) {
////                                a++;
////                            }
////                        } else if (age.getTarea().getTareaclases().iterator().hasNext()) {
////                            Dia di = age.getDia2(otro);
////                            if (di.getIdDia() != null) {
////                                Iterator itin = di.getIniciofins().iterator();
////                                while (itin.hasNext()) {
////                                    Iniciofin in = (Iniciofin) itin.next();
////                                    if (ini.getInicio().compareTo(in.getInicio()) <= 0 && ini.getFin().compareTo(in.getInicio()) >= 0) {
////                                        a++;
////                                    } else if (ini.getInicio().compareTo(in.getFin()) <= 0 && ini.getFin().compareTo(in.getFin()) >= 0) {
////                                        a++;
////                                    } else if (ini.getInicio().compareTo(in.getInicio()) >= 0 && ini.getFin().compareTo(in.getInicio()) >= 0 && ini.getInicio().compareTo(in.getFin()) <= 0 && ini.getFin().compareTo(in.getFin()) <= 0) {
////                                        a++;
////                                    }
////                                }
////                            }
////                        } else if (age.getTarea().getTareareunions().iterator().hasNext()) {
////                            Dia di = age.getDia2(otro);
////                            if (di.getIdDia() != null) {
////                                Iterator itin = di.getIniciofins().iterator();
////                                while (itin.hasNext()) {
////                                    Iniciofin in = (Iniciofin) itin.next();
////                                    if (ini.getInicio().compareTo(in.getInicio()) <= 0 && ini.getFin().compareTo(in.getInicio()) >= 0) {
////                                        a++;
////                                    } else if (ini.getInicio().compareTo(in.getFin()) <= 0 && ini.getFin().compareTo(in.getFin()) >= 0) {
////                                        a++;
////                                    } else if (ini.getInicio().compareTo(in.getInicio()) >= 0 && ini.getFin().compareTo(in.getInicio()) >= 0 && ini.getInicio().compareTo(in.getFin()) <= 0 && ini.getFin().compareTo(in.getFin()) <= 0) {
////                                        a++;
////                                    }
////                                }
////                            }
////                        }
////                    }
////                }
////            }
////            if (!declaracionjuradas.isEmpty()) {
////                Iterator itact = declaracionjuradas.iterator().next().ObtenerActivos("JUEVES").iterator();
////                while (itact.hasNext()) {
////                    Activo act = (Activo) itact.next();
////                    Iterator itin = act.getActivoIniciofins().iterator();
////                    while (itin.hasNext()) {
////                        ActivoIniciofin in = (ActivoIniciofin) itin.next();
////                        if (ini.getInicio().compareTo(in.getInicio()) <= 0 && ini.getFin().compareTo(in.getInicio()) >= 0) {
////                            d++;
////                        } else if (ini.getInicio().compareTo(in.getFin()) <= 0 && ini.getFin().compareTo(in.getFin()) >= 0) {
////                            d++;
////                        } else if (ini.getInicio().compareTo(in.getInicio()) >= 0 && ini.getFin().compareTo(in.getInicio()) >= 0 && ini.getInicio().compareTo(in.getFin()) <= 0 && ini.getFin().compareTo(in.getFin()) <= 0) {
////                            d++;
////                        }
//////                        if (in.getInicio().compareTo(ini.getInicio()) > 0 && in.getInicio().compareTo(ini.getFin()) < 0 || in.getFin().compareTo(ini.getInicio()) > 0 && in.getFin().compareTo(ini.getFin()) < 0) {
//////                            d++;
//////                        }
////                    }
////                }
////            }
////            otro = Controlador.sumarFechasDias(otro, 7);
////        }
////        // </editor-fold>
////        }
////        Date ot5 = inici;
////        if (dsem.contains("VIERNES")) {
////            while (ot5.getDay() != 5) {
////                ot5 = Controlador.sumarFechasDias(ot5, 1);
////            }
////             Date otro = ot5;
////            // <editor-fold defaultstate="collapsed" desc="Guardar meses y dias">
////        while (otro.compareTo(finn) <= 0) {
////            if (!Controlador.PERSISTENCIA.getAgendas(idPersonal).isEmpty()) {
////                Iterator it = Controlador.PERSISTENCIA.getAgendas(idPersonal).iterator();
////                while (it.hasNext()) {
////                    Agenda age = (Agenda) it.next();
////                    if (age.getPersonal().getEstado() == true && age.getTarea().getEstado() == true) {
////                        if (age.getTarea().getTareaotros().iterator().hasNext()) {
////                            Tareaotro tarot = age.getTarea().getTareaotros().iterator().next();
////                            Date inicio = tarot.getDiaInicio();
////                            Date fin = tarot.getDiaFin();
////                            if (otro.compareTo(inicio) >= 0 && otro.compareTo(fin) <= 0) {
////                                a++;
////                            }
////                        } else if (age.getTarea().getTareaextracurriculars().iterator().hasNext()) {
////                            Tareaextracurricular tarot = age.getTarea().getTareaextracurriculars().iterator().next();
////                            Date inicio = tarot.getDiaInicio();
////                            Date fin = tarot.getDiaFin();
////                            if (otro.compareTo(inicio) >= 0 && otro.compareTo(fin) <= 0) {
////                                a++;
////                            }
////                        } else if (age.getTarea().getTareaclases().iterator().hasNext()) {
////                            Dia di = age.getDia2(otro);
////                            if (di.getIdDia() != null) {
////                                Iterator itin = di.getIniciofins().iterator();
////                                while (itin.hasNext()) {
////                                    Iniciofin in = (Iniciofin) itin.next();
////                                    if (ini.getInicio().compareTo(in.getInicio()) <= 0 && ini.getFin().compareTo(in.getInicio()) >= 0) {
////                                        a++;
////                                    } else if (ini.getInicio().compareTo(in.getFin()) <= 0 && ini.getFin().compareTo(in.getFin()) >= 0) {
////                                        a++;
////                                    } else if (ini.getInicio().compareTo(in.getInicio()) >= 0 && ini.getFin().compareTo(in.getInicio()) >= 0 && ini.getInicio().compareTo(in.getFin()) <= 0 && ini.getFin().compareTo(in.getFin()) <= 0) {
////                                        a++;
////                                    }
////                                }
////                            }
////                        } else if (age.getTarea().getTareareunions().iterator().hasNext()) {
////                            Dia di = age.getDia2(otro);
////                            if (di.getIdDia() != null) {
////                                Iterator itin = di.getIniciofins().iterator();
////                                while (itin.hasNext()) {
////                                    Iniciofin in = (Iniciofin) itin.next();
////                                    if (ini.getInicio().compareTo(in.getInicio()) <= 0 && ini.getFin().compareTo(in.getInicio()) >= 0) {
////                                        a++;
////                                    } else if (ini.getInicio().compareTo(in.getFin()) <= 0 && ini.getFin().compareTo(in.getFin()) >= 0) {
////                                        a++;
////                                    } else if (ini.getInicio().compareTo(in.getInicio()) >= 0 && ini.getFin().compareTo(in.getInicio()) >= 0 && ini.getInicio().compareTo(in.getFin()) <= 0 && ini.getFin().compareTo(in.getFin()) <= 0) {
////                                        a++;
////                                    }
////                                }
////                            }
////                        }
////                    }
////                }
////            }
////            if (!declaracionjuradas.isEmpty()) {
////                Iterator itact = declaracionjuradas.iterator().next().ObtenerActivos("VIERNES").iterator();
////                while (itact.hasNext()) {
////                    Activo act = (Activo) itact.next();
////                    Iterator itin = act.getActivoIniciofins().iterator();
////                    while (itin.hasNext()) {
////                        ActivoIniciofin in = (ActivoIniciofin) itin.next();
////                        if (ini.getInicio().compareTo(in.getInicio()) <= 0 && ini.getFin().compareTo(in.getInicio()) >= 0) {
////                            d++;
////                        } else if (ini.getInicio().compareTo(in.getFin()) <= 0 && ini.getFin().compareTo(in.getFin()) >= 0) {
////                            d++;
////                        } else if (ini.getInicio().compareTo(in.getInicio()) >= 0 && ini.getFin().compareTo(in.getInicio()) >= 0 && ini.getInicio().compareTo(in.getFin()) <= 0 && ini.getFin().compareTo(in.getFin()) <= 0) {
////                            d++;
////                        }
//////                        if (in.getInicio().compareTo(ini.getInicio()) > 0 && in.getInicio().compareTo(ini.getFin()) < 0 || in.getFin().compareTo(ini.getInicio()) > 0 && in.getFin().compareTo(ini.getFin()) < 0) {
//////                            d++;
//////                        }
////                    }
////                }
////            }
////            otro = Controlador.sumarFechasDias(otro, 7);
////        }
////        // </editor-fold>
////        }
////        Date ot6 = inici;
////        if (dsem.contains("SABADO")) {
////            while (ot6.getDay() != 6) {
////                ot6 = Controlador.sumarFechasDias(ot6, 1);
////            }
////             Date otro = ot6;
////            // <editor-fold defaultstate="collapsed" desc="Guardar meses y dias">
////        while (otro.compareTo(finn) <= 0) {
////            if (!Controlador.PERSISTENCIA.getAgendas(idPersonal).isEmpty()) {
////                Iterator it = Controlador.PERSISTENCIA.getAgendas(idPersonal).iterator();
////                while (it.hasNext()) {
////                    Agenda age = (Agenda) it.next();
////                    if (age.getPersonal().getEstado() == true && age.getTarea().getEstado() == true) {
////                        if (age.getTarea().getTareaotros().iterator().hasNext()) {
////                            Tareaotro tarot = age.getTarea().getTareaotros().iterator().next();
////                            Date inicio = tarot.getDiaInicio();
////                            Date fin = tarot.getDiaFin();
////                            if (otro.compareTo(inicio) >= 0 && otro.compareTo(fin) <= 0) {
////                                a++;
////                            }
////                        } else if (age.getTarea().getTareaextracurriculars().iterator().hasNext()) {
////                            Tareaextracurricular tarot = age.getTarea().getTareaextracurriculars().iterator().next();
////                            Date inicio = tarot.getDiaInicio();
////                            Date fin = tarot.getDiaFin();
////                            if (otro.compareTo(inicio) >= 0 && otro.compareTo(fin) <= 0) {
////                                a++;
////                            }
////                        } else if (age.getTarea().getTareaclases().iterator().hasNext()) {
////                            Dia di = age.getDia2(otro);
////                            if (di.getIdDia() != null) {
////                                Iterator itin = di.getIniciofins().iterator();
////                                while (itin.hasNext()) {
////                                    Iniciofin in = (Iniciofin) itin.next();
////                                    if (ini.getInicio().compareTo(in.getInicio()) <= 0 && ini.getFin().compareTo(in.getInicio()) >= 0) {
////                                        a++;
////                                    } else if (ini.getInicio().compareTo(in.getFin()) <= 0 && ini.getFin().compareTo(in.getFin()) >= 0) {
////                                        a++;
////                                    } else if (ini.getInicio().compareTo(in.getInicio()) >= 0 && ini.getFin().compareTo(in.getInicio()) >= 0 && ini.getInicio().compareTo(in.getFin()) <= 0 && ini.getFin().compareTo(in.getFin()) <= 0) {
////                                        a++;
////                                    }
////                                }
////                            }
////                        } else if (age.getTarea().getTareareunions().iterator().hasNext()) {
////                            Dia di = age.getDia2(otro);
////                            if (di.getIdDia() != null) {
////                                Iterator itin = di.getIniciofins().iterator();
////                                while (itin.hasNext()) {
////                                    Iniciofin in = (Iniciofin) itin.next();
////                                    if (ini.getInicio().compareTo(in.getInicio()) <= 0 && ini.getFin().compareTo(in.getInicio()) >= 0) {
////                                        a++;
////                                    } else if (ini.getInicio().compareTo(in.getFin()) <= 0 && ini.getFin().compareTo(in.getFin()) >= 0) {
////                                        a++;
////                                    } else if (ini.getInicio().compareTo(in.getInicio()) >= 0 && ini.getFin().compareTo(in.getInicio()) >= 0 && ini.getInicio().compareTo(in.getFin()) <= 0 && ini.getFin().compareTo(in.getFin()) <= 0) {
////                                        a++;
////                                    }
////                                }
////                            }
////                        }
////                    }
////                }
////            }
////            if (!declaracionjuradas.isEmpty()) {
////                Iterator itact = declaracionjuradas.iterator().next().ObtenerActivos("SABADO").iterator();
////                while (itact.hasNext()) {
////                    Activo act = (Activo) itact.next();
////                    Iterator itin = act.getActivoIniciofins().iterator();
////                    while (itin.hasNext()) {
////                        ActivoIniciofin in = (ActivoIniciofin) itin.next();
////                        if (ini.getInicio().compareTo(in.getInicio()) <= 0 && ini.getFin().compareTo(in.getInicio()) >= 0) {
////                            d++;
////                        } else if (ini.getInicio().compareTo(in.getFin()) <= 0 && ini.getFin().compareTo(in.getFin()) >= 0) {
////                            d++;
////                        } else if (ini.getInicio().compareTo(in.getInicio()) >= 0 && ini.getFin().compareTo(in.getInicio()) >= 0 && ini.getInicio().compareTo(in.getFin()) <= 0 && ini.getFin().compareTo(in.getFin()) <= 0) {
////                            d++;
////                        }
//////                        if (in.getInicio().compareTo(ini.getInicio()) > 0 && in.getInicio().compareTo(ini.getFin()) < 0 || in.getFin().compareTo(ini.getInicio()) > 0 && in.getFin().compareTo(ini.getFin()) < 0) {
//////                            d++;
//////                        }
////                    }
////                }
////            }
////            otro = Controlador.sumarFechasDias(otro, 7);
////        }
////        // </editor-fold>
////        }
////
////       
////        int[][] cant = new int[2][];
////        cant[0] = new int[a];
////        cant[1] = new int[d];
////        return cant;
////    }
////
    
        
//    public boolean VerificarDisponibilidadReunion (Date dia, Iniciofin ini){
//        boolean band=true;
//        try{
//            if(!agendas.isEmpty()){
//                Iterator it=agendas.iterator();
//                while(it.hasNext()){
//                    Agenda age=(Agenda) it.next();
//                    Dia di=age.getDia2(dia);
//                    if(di.getIdDia()!=null){
//                        Iterator itin=di.getIniciofins().iterator();
//                        while(itin.hasNext()){
//                            Iniciofin in=(Iniciofin) itin.next();
//                            if(in.getDia().getMes().getAno().getAgenda().getTarea().getEstado()==true && in.getDia().getMes().getAno().getAgenda().getPersonal().getEstado()==true ){
//                                if(in.getInicio().compareTo(ini.getInicio())>0 && in.getInicio().compareTo(ini.getFin())<0 || in.getFin().compareTo(ini.getInicio())>0 && in.getFin().compareTo(ini.getFin())<0){
//                                    band=false;
//                                    JOptionPane.showMessageDialog(null,"no existe disponibilidad porque hay otra tarea a ese horario");
//                                    return band;
//                                }
//                            }
//                        }
//                    }
//                }
//            }
//            if(!declaracionjuradas.isEmpty()){
//                String di= ObtenerDia(dia.getDay());
//                Iterator itact=declaracionjuradas.iterator().next().ObtenerActivos(di).iterator();
//                while(itact.hasNext()){
//                    Activo act=(Activo) itact.next();
//                    Iterator itin=act.getActivoIniciofins().iterator();
//                    while(itin.hasNext()){
//                        ActivoIniciofin in=(ActivoIniciofin) itin.next();
//                        if(in.getInicio().compareTo(ini.getInicio())>0 && in.getInicio().compareTo(ini.getFin())<0 || in.getFin().compareTo(ini.getInicio())>0 && in.getFin().compareTo(ini.getFin())<0){
//                            band=false;
//                            JOptionPane.showMessageDialog(null,"no existe disponibilidad por parte de la declaración jurada a ese horario");
//                            return band;
//                        }
//                    }
//                }
//            }
//        }catch(Exception ex){JOptionPane.showMessageDialog(null, ex.toString());}
//        return band;
//    }
//    
    
    public Declaracionjurada getDeclaracionjurada() {
        Declaracionjurada dec=new Declaracionjurada();
        Iterator it=declaracionjuradas.iterator();
        while(it.hasNext()){
            dec=(Declaracionjurada) it.next();
        }
        
        
        return dec;
    }

    public Registroacceso getRegistroacceso(int idreg) {
        Registroacceso reg=new Registroacceso();
        Iterator it= registroaccesos.iterator();
        while(it.hasNext()){
            Registroacceso registro=(Registroacceso) it.next();
            if(registro.getIdRegistroacceso()==idreg){
                reg=registro;
                break;
            }
            
        }
        return reg;
    }


}


